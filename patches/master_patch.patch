diff --git a/base/threading/thread_restrictions.h b/base/threading/thread_restrictions.h
index abfde3aaab1f1bc6cb8f925576b8e049e00cc798..8b28f6112caf232a473401d95b70ca97ff174dfa 100644
--- a/base/threading/thread_restrictions.h
+++ b/base/threading/thread_restrictions.h
@@ -33,6 +33,13 @@ class StatisticsProviderImpl;
 namespace chrome_browser_net {
 class Predictor;
 }
+
+namespace atom {
+namespace api {
+  class Session;
+}
+}
+
 namespace content {
 class BrowserGpuChannelHostFactory;
 class BrowserGpuMemoryBufferManager;
@@ -418,6 +425,9 @@ class BASE_EXPORT ThreadRestrictions {
   friend class ui::CommandBufferLocal;
   friend class ui::GpuState;
 
+  // BB: MUON ones that maybe need to be fixed???
+  friend class atom::api::Session;
+
   // END ALLOWED USAGE.
   // BEGIN USAGE THAT NEEDS TO BE FIXED.
   friend class ::chromeos::BlockingMethodCaller;  // http://crbug.com/125360
diff --git a/build/config/BUILDCONFIG.gn b/build/config/BUILDCONFIG.gn
index 853c8492ce95d1cfaab058c799546e20f9d52cb4..e4bd9f124ea0d024f4d3102550631bc46a74d453 100644
--- a/build/config/BUILDCONFIG.gn
+++ b/build/config/BUILDCONFIG.gn
@@ -152,6 +152,8 @@ declare_args() {
   host_toolchain = ""
 
   # DON'T ADD MORE FLAGS HERE. Read the comment above.
+  # Build chromium without muon flags
+  muon_chromium_build = false
 }
 
 declare_args() {
@@ -534,6 +536,13 @@ default_compiler_configs = [
   "//build/config/coverage:default_coverage",
   "//build/config/sanitizers:default_sanitizer_flags",
 ]
+if (!muon_chromium_build) {
+  default_compiler_configs -= [ "//build/config/compiler:default_include_dirs" ]
+  default_compiler_configs += [
+    "//electron/build:muon_include_dirs",
+    "//build/config/compiler:default_include_dirs"
+  ]
+}
 if (is_win) {
   default_compiler_configs += [
     "//build/config/win:default_crt",
diff --git a/build/config/chrome_build.gni b/build/config/chrome_build.gni
index 4bb4a043cbbcb562aed8926867660547cd7f018c..769bc73607b600d549b6185a37d6b0cc35ded9f6 100644
--- a/build/config/chrome_build.gni
+++ b/build/config/chrome_build.gni
@@ -11,6 +11,7 @@ declare_args() {
   # Break chrome.dll into multple pieces based on process type. Only available
   # on Windows.
   is_multi_dll_chrome = is_win && !is_component_build
+  branding_path_component = ""
 
   # Turn this on to generate order files. See
   # https://chromium.googlesource.com/chromium/src/+/master/docs/win_order_files.md
@@ -19,8 +20,10 @@ declare_args() {
 
 # Refers to the subdirectory for branding in various places including
 # chrome/app/theme.
+if (branding_path_component == "") {
 if (is_chrome_branded) {
   branding_path_component = "google_chrome"
 } else {
   branding_path_component = "chromium"
 }
+}
diff --git a/build/toolchain/mac/BUILD.gn b/build/toolchain/mac/BUILD.gn
index f66bca0ea2c85577dd5b28ddfdbe252f1824df2e..2334814336d4f0b7abf78e00e8d2412e18668eba 100644
--- a/build/toolchain/mac/BUILD.gn
+++ b/build/toolchain/mac/BUILD.gn
@@ -234,13 +234,15 @@ template("mac_toolchain") {
     }
 
     tool("alink") {
+      rspfile = "{{output}}.rsp"
       script =
           rebase_path("//build/toolchain/mac/filter_libtool.py", root_build_dir)
-      command = "$env_wrapper rm -f {{output}} && TOOL_VERSION=${tool_versions.filter_libtool} python $script libtool -static {{arflags}} -o {{output}} {{inputs}}"
+      command = "$env_wrapper rm -f {{output}} && TOOL_VERSION=${tool_versions.filter_libtool} python $script libtool -static {{arflags}} -o {{output}} -filelist \"$rspfile\""
       description = "LIBTOOL-STATIC {{output}}"
       outputs = [
         "{{output_dir}}/{{target_output_name}}{{output_extension}}",
       ]
+      rspfile_content = "{{inputs_newline}}"
       default_output_dir = "{{target_out_dir}}"
       default_output_extension = ".a"
       output_prefix = "lib"
diff --git a/build/toolchain/win/BUILD.gn b/build/toolchain/win/BUILD.gn
index df1a50fcffb20da8d2d78c259a826e9a0f8cd1cf..65fd8cdfe5cbb8d1de10da27b50086f15d0a5028 100644
--- a/build/toolchain/win/BUILD.gn
+++ b/build/toolchain/win/BUILD.gn
@@ -6,6 +6,7 @@ import("//build/config/clang/clang.gni")
 import("//build/config/compiler/compiler.gni")
 import("//build/config/sanitizers/sanitizers.gni")
 import("//build/config/win/visual_studio_version.gni")
+import("//build/toolchain/cc_wrapper.gni")
 import("//build/toolchain/clang_static_analyzer.gni")
 import("//build/toolchain/goma.gni")
 import("//build/toolchain/toolchain.gni")
@@ -28,6 +29,8 @@ if (use_goma) {
   } else {
     goma_prefix = "$goma_dir/gomacc "
   }
+} else if (cc_wrapper != "") {
+  goma_prefix = "$cc_wrapper "
 } else {
   goma_prefix = ""
 }
diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index 960921acd7ebb0ba99092745e8d30bca76821f2a..a223e8ea1db840d5abc8587adfb8970ad51c14e3 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -36,6 +36,11 @@ if (is_android) {
   import("//build/util/version.gni")
   import("//media/cdm/ppapi/cdm_paths.gni")
   import("//third_party/icu/config.gni")
+  if (!muon_chromium_build) {
+    # Avoid mac app/framework naming conflicts
+    chrome_product_full_name = "Google Chrome"
+    chrome_product_short_name = "Google Chrome"
+  }
 }
 
 assert(!is_ios, "Chromium/iOS shouldn't use anything in //chrome")
diff --git a/chrome/browser/chrome_content_browser_manifest_overlay.json b/chrome/browser/chrome_content_browser_manifest_overlay.json
index 19cb2b02d4c944988f9f928b3dbda166a9233d3f..cddd71e1aef22f4930626f09a545c738cc305474 100644
--- a/chrome/browser/chrome_content_browser_manifest_overlay.json
+++ b/chrome/browser/chrome_content_browser_manifest_overlay.json
@@ -12,7 +12,7 @@
           "extensions::StashService",
           "metrics::mojom::LeakDetector",
           "mojom::ModuleEventSink",
-          "rappor::mojom::RapporRecorder",
+//          "rappor::mojom::RapporRecorder",
           "safe_browsing::mojom::SafeBrowsing",
           "translate::mojom::ContentTranslateDriver"
         ],
@@ -49,6 +49,7 @@
         "patch": [ "patch_file" ],
         "pdf_compositor": [ "compositor" ],
         "profile_import": [ "import" ],
+        "tor_launcher": [ "tor_launcher" ],
         "profiling": [ "profiling" ],
         "proxy_resolver": [ "factory" ],
         "preferences": [ "pref_client", "pref_control" ],
diff --git a/chrome/browser/chrome_service.cc b/chrome/browser/chrome_service.cc
index 1bd2e1d014ec61491a2904b30c9197da3691c46d..87dd94ff56138b4d81f9b05c0c49f7fc644d7ed4 100644
--- a/chrome/browser/chrome_service.cc
+++ b/chrome/browser/chrome_service.cc
@@ -31,8 +31,6 @@ ChromeService::ChromeService() {
   registry_.AddInterface(
       base::Bind(&chromeos::Launchable::Bind, base::Unretained(&launchable_)));
 #endif
-  registry_.AddInterface(
-      base::Bind(&startup_metric_utils::StartupMetricHostImpl::Create));
 #if BUILDFLAG(ENABLE_SPELLCHECK)
   registry_with_source_info_.AddInterface(
       base::BindRepeating(&SpellCheckHostChromeImpl::Create),
diff --git a/chrome/browser/importer/external_process_importer_client.h b/chrome/browser/importer/external_process_importer_client.h
index 864a6951115dda5ed74963f18b35692960397d50..3e1a2b719521ac2c60bae05f94e409bc4c7da022 100644
--- a/chrome/browser/importer/external_process_importer_client.h
+++ b/chrome/browser/importer/external_process_importer_client.h
@@ -88,6 +88,8 @@ class ExternalProcessImporterClient
   void OnAutofillFormDataImportGroup(
       const std::vector<ImporterAutofillFormDataEntry>&
           autofill_form_data_entry_group) override;
+  void OnCookiesImportStart(uint32_t total_cookies_count) override {};
+  void OnCookiesImportGroup(const std::vector<ImportedCookieEntry>& cookies_group) override {};
   void OnIE7PasswordReceived(
       const importer::ImporterIE7PasswordInfo& importer_password_info) override;
 
diff --git a/chrome/browser/importer/external_process_importer_host.h b/chrome/browser/importer/external_process_importer_host.h
index 08c6f28746cc5f345114a942834db18f5c7a1d41..3a43ae76f054ba449e3b892ea752c62fdad2e5a3 100644
--- a/chrome/browser/importer/external_process_importer_host.h
+++ b/chrome/browser/importer/external_process_importer_host.h
@@ -74,7 +74,10 @@ class ExternalProcessImporterHost
 
  private:
   // ExternalProcessImporterHost deletes itself in OnImportEnded().
+ protected:
   ~ExternalProcessImporterHost() override;
+ private:
+  friend class BraveExternalProcessImporterHost;
 
   // Launches the utility process that starts the import task, unless bookmark
   // or template model are not yet loaded. If load is not detected, this method
diff --git a/chrome/browser/importer/in_process_importer_bridge.h b/chrome/browser/importer/in_process_importer_bridge.h
index 247d24220beb7d176b890d7c2d45bdd2dfd8db99..c270bba0fabb557e8d3d1df8ac166bbb00ed6e8b 100644
--- a/chrome/browser/importer/in_process_importer_bridge.h
+++ b/chrome/browser/importer/in_process_importer_bridge.h
@@ -68,7 +68,9 @@ class InProcessImporterBridge : public ImporterBridge {
   // End ImporterBridge implementation.
 
  private:
+ protected:
   ~InProcessImporterBridge() override;
+ private:
 
   ProfileWriter* const writer_;  // weak
   const base::WeakPtr<ExternalProcessImporterHost> host_;
diff --git a/chrome/browser/metrics/metrics_reporting_state.cc b/chrome/browser/metrics/metrics_reporting_state.cc
index 2592dea8c30aa5e7b9daf614a63fe964471bab7a..5fede5d8ee00b4b06d437b4272ec19a0146c7fdb 100644
--- a/chrome/browser/metrics/metrics_reporting_state.cc
+++ b/chrome/browser/metrics/metrics_reporting_state.cc
@@ -60,6 +60,7 @@ void SetMetricsReporting(bool to_update_pref,
   g_browser_process->local_state()->SetBoolean(
       metrics::prefs::kMetricsReportingEnabled, updated_pref);
 
+#if defined(MUON_CHROMIUM_BUILD)
   UpdateMetricsPrefsOnPermissionChange(updated_pref);
 
   // Uses the current state of whether reporting is enabled to enable services.
@@ -71,6 +72,7 @@ void SetMetricsReporting(bool to_update_pref,
   } else {
     RecordMetricsReportingHistogramValue(METRICS_REPORTING_ERROR);
   }
+#endif
   if (!callback_fn.is_null())
     callback_fn.Run(updated_pref);
 }
diff --git a/chrome/browser/password_manager/password_store_factory.cc b/chrome/browser/password_manager/password_store_factory.cc
index 54e54a5a1f922b84746b2f62c900857206257a24..00e706352dd09a0c8a7d5773c966ea2e392c45b3 100644
--- a/chrome/browser/password_manager/password_store_factory.cc
+++ b/chrome/browser/password_manager/password_store_factory.cc
@@ -113,8 +113,10 @@ PasswordStoreFactory::PasswordStoreFactory()
 #if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   // TODO(crbug.com/715987). Remove when PasswordReuseDetector is decoupled
   // from PasswordStore.
+#if defined(MUON_CHROMIUM_BUILD)
   DependsOn(SigninManagerFactory::GetInstance());
 #endif
+#endif
 }
 
 PasswordStoreFactory::~PasswordStoreFactory() {}
@@ -264,12 +266,14 @@ PasswordStoreFactory::BuildServiceInstanceFor(
       ps.get(), profile->GetPrefs(),
       base::WrapRefCounted(profile->GetRequestContext()));
 
+#if defined(MUON_CHROMIUM_BUILD)
 #if defined(OS_WIN) || defined(OS_MACOSX) || \
     (defined(OS_LINUX) && !defined(OS_CHROMEOS))
   std::unique_ptr<password_manager::PasswordStoreSigninNotifier> notifier =
       base::MakeUnique<password_manager::PasswordStoreSigninNotifierImpl>(
           profile);
   ps->SetPasswordStoreSigninNotifier(std::move(notifier));
+#endif
 #endif
 
   return ps;
diff --git a/chrome/browser/printing/print_view_manager_base.cc b/chrome/browser/printing/print_view_manager_base.cc
index f5f81901489121699fb7b18174f016918ae889f2..01b149aa75ca2e417ab6a857881f0add6b5f1822 100644
--- a/chrome/browser/printing/print_view_manager_base.cc
+++ b/chrome/browser/printing/print_view_manager_base.cc
@@ -71,13 +71,13 @@ using PrintSettingsCallback =
 
 void ShowWarningMessageBox(const base::string16& message) {
   // Runs always on the UI thread.
-  static bool is_dialog_shown = false;
-  if (is_dialog_shown)
-    return;
+  // static bool is_dialog_shown = false;
+  // if (is_dialog_shown)
+  //   return;
   // Block opening dialog from nested task.
-  base::AutoReset<bool> auto_reset(&is_dialog_shown, true);
+  // base::AutoReset<bool> auto_reset(&is_dialog_shown, true);
 
-  chrome::ShowWarningMessageBox(nullptr, base::string16(), message);
+  // chrome::ShowWarningMessageBox(nullptr, base::string16(), message);
 }
 
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW)
diff --git a/chrome/browser/renderer_host/chrome_extension_message_filter.cc b/chrome/browser/renderer_host/chrome_extension_message_filter.cc
index 5b98dda96e08f425ac1d63b119874f30be0d0ed9..1ae5ce0126b509b3d56aa84f23c75b69b2609864 100644
--- a/chrome/browser/renderer_host/chrome_extension_message_filter.cc
+++ b/chrome/browser/renderer_host/chrome_extension_message_filter.cc
@@ -16,16 +16,19 @@
 #include "base/task_scheduler/post_task.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/chrome_notification_types.h"
+#if 0
 #include "chrome/browser/extensions/activity_log/activity_action_constants.h"
 #include "chrome/browser/extensions/activity_log/activity_actions.h"
 #include "chrome/browser/extensions/activity_log/activity_log.h"
 #include "chrome/browser/extensions/api/activity_log_private/activity_log_private_api.h"
+#endif  // 0
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/common/extensions/chrome_extension_messages.h"
 #include "content/public/browser/notification_service.h"
 #include "content/public/browser/render_process_host.h"
 #include "extensions/browser/extension_system.h"
+#include "extensions/browser/info_map.h"
 #include "extensions/common/extension_messages.h"
 #include "extensions/common/extension_set.h"
 #include "extensions/common/file_util.h"
@@ -41,6 +44,7 @@ const uint32_t kFilteredMessageClasses[] = {
     ChromeExtensionMsgStart, ExtensionMsgStart,
 };
 
+#if 0
 // Logs an action to the extension activity log for the specified profile.
 void AddActionToExtensionActivityLog(Profile* profile,
                                      extensions::ActivityLog* activity_log,
@@ -53,6 +57,7 @@ void AddActionToExtensionActivityLog(Profile* profile,
     action->set_page_incognito(profile->IsOffTheRecord());
   activity_log->LogAction(action);
 }
+#endif  // 0
 
 }  // namespace
 
@@ -63,7 +68,7 @@ ChromeExtensionMessageFilter::ChromeExtensionMessageFilter(
                            arraysize(kFilteredMessageClasses)),
       render_process_id_(render_process_id),
       profile_(profile),
-      activity_log_(extensions::ActivityLog::GetInstance(profile)),
+      // activity_log_(extensions::ActivityLog::GetInstance(profile)),
       extension_info_map_(
           extensions::ExtensionSystem::Get(profile)->info_map()) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
@@ -82,12 +87,14 @@ bool ChromeExtensionMessageFilter::OnMessageReceived(
   IPC_BEGIN_MESSAGE_MAP(ChromeExtensionMessageFilter, message)
     IPC_MESSAGE_HANDLER_DELAY_REPLY(ExtensionHostMsg_GetMessageBundle,
                                     OnGetExtMessageBundle)
+#if 0
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddAPIActionToActivityLog,
                         OnAddAPIActionToExtensionActivityLog);
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddDOMActionToActivityLog,
                         OnAddDOMActionToExtensionActivityLog);
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddEventToActivityLog,
                         OnAddEventToExtensionActivityLog);
+#endif  // 0
     IPC_MESSAGE_UNHANDLED(handled = false)
   IPC_END_MESSAGE_MAP()
 
@@ -97,9 +104,11 @@ bool ChromeExtensionMessageFilter::OnMessageReceived(
 void ChromeExtensionMessageFilter::OverrideThreadForMessage(
     const IPC::Message& message, BrowserThread::ID* thread) {
   switch (message.type()) {
+#if 0
     case ExtensionHostMsg_AddAPIActionToActivityLog::ID:
     case ExtensionHostMsg_AddDOMActionToActivityLog::ID:
     case ExtensionHostMsg_AddEventToActivityLog::ID:
+#endif  // 0
       *thread = BrowserThread::UI;
       break;
     default:
@@ -181,6 +190,7 @@ void ChromeExtensionMessageFilter::OnGetExtMessageBundleAsync(
   Send(reply_msg);
 }
 
+#if 0
 void ChromeExtensionMessageFilter::OnAddAPIActionToExtensionActivityLog(
     const std::string& extension_id,
     const ExtensionHostMsg_APIActionOrEvent_Params& params) {
@@ -231,6 +241,7 @@ void ChromeExtensionMessageFilter::OnAddEventToExtensionActivityLog(
   }
   AddActionToExtensionActivityLog(profile_, activity_log_, action);
 }
+#endif  // 0
 
 void ChromeExtensionMessageFilter::Observe(
     int type,
@@ -238,7 +249,7 @@ void ChromeExtensionMessageFilter::Observe(
     const content::NotificationDetails& details) {
   DCHECK_EQ(chrome::NOTIFICATION_PROFILE_DESTROYED, type);
   profile_ = NULL;
-  activity_log_ = nullptr;
+  // activity_log_ = nullptr;
 }
 
 bool ChromeExtensionMessageFilter::ShouldLogExtensionAction(
@@ -247,7 +258,8 @@ bool ChromeExtensionMessageFilter::ShouldLogExtensionAction(
   // conditions (e.g. logging gets disabled but the renderer sends the message
   // before it gets updated), we still need this check here.
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  return profile_ &&
-         g_browser_process->profile_manager()->IsValidProfile(profile_) &&
-         activity_log_ && activity_log_->ShouldLog(extension_id);
+  // return profile_ &&
+  //        g_browser_process->profile_manager()->IsValidProfile(profile_) &&
+  //        activity_log_ && activity_log_->ShouldLog(extension_id);
+  return false;
 }
diff --git a/chrome/browser/renderer_host/chrome_extension_message_filter.h b/chrome/browser/renderer_host/chrome_extension_message_filter.h
index 663cda3f3413e5495f8ec77eaaf33c835cc00711..8c9b1fd5abe7fd3e17a3e98c479f056ccbe14a5b 100644
--- a/chrome/browser/renderer_host/chrome_extension_message_filter.h
+++ b/chrome/browser/renderer_host/chrome_extension_message_filter.h
@@ -54,6 +54,7 @@ class ChromeExtensionMessageFilter : public content::BrowserMessageFilter,
       const std::string& main_extension_id,
       const std::string& default_locale,
       IPC::Message* reply_msg);
+#if 0
   void OnAddAPIActionToExtensionActivityLog(
       const std::string& extension_id,
       const ExtensionHostMsg_APIActionOrEvent_Params& params);
@@ -66,6 +67,7 @@ class ChromeExtensionMessageFilter : public content::BrowserMessageFilter,
   void OnAddEventToExtensionActivityLog(
       const std::string& extension_id,
       const ExtensionHostMsg_APIActionOrEvent_Params& params);
+#endif  // 0
 
   // content::NotificationObserver implementation.
   void Observe(int type,
diff --git a/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc b/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
index a5ea92f2878459b49f88d4895c7d18f2e157dd6c..9cffca0352713bce12b4035c02612cd7e2976aad 100644
--- a/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
+++ b/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
@@ -57,13 +57,13 @@ ChromeBrowserPepperHostFactory::CreateResourceHost(
         return std::unique_ptr<ResourceHost>(new MessageFilterHost(
             host_->GetPpapiHost(), instance, resource, pv_filter));
       }
-      case PpapiHostMsg_OutputProtection_Create::ID: {
-        scoped_refptr<ResourceMessageFilter> output_protection_filter(
-            new PepperOutputProtectionMessageFilter(host_, instance));
-        return std::unique_ptr<ResourceHost>(
-            new MessageFilterHost(host_->GetPpapiHost(), instance, resource,
-                                  output_protection_filter));
-      }
+      // case PpapiHostMsg_OutputProtection_Create::ID: {
+      //   scoped_refptr<ResourceMessageFilter> output_protection_filter(
+      //       new PepperOutputProtectionMessageFilter(host_, instance));
+      //   return std::unique_ptr<ResourceHost>(
+      //       new MessageFilterHost(host_->GetPpapiHost(), instance, resource,
+      //                             output_protection_filter));
+      // }
     }
   }
 
diff --git a/chrome/browser/resource_coordinator/tab_manager.cc b/chrome/browser/resource_coordinator/tab_manager.cc
index 633dc40d895baee17ebe617c14cd4333fd044dad..59eb777fae2a1b1d69d097ffe0e7af126628d317 100644
--- a/chrome/browser/resource_coordinator/tab_manager.cc
+++ b/chrome/browser/resource_coordinator/tab_manager.cc
@@ -661,7 +661,8 @@ void TabManager::AddTabStats(const BrowserInfo& browser_info,
   TabStripModel* tab_strip_model = browser_info.tab_strip_model;
   for (int i = 0; i < tab_strip_model->count(); i++) {
     WebContents* contents = tab_strip_model->GetWebContentsAt(i);
-    if (!contents->IsCrashed()) {
+    // TODO(bridiver) - temporary workaround for pinned and unloaded tabs
+    if (contents && !contents->IsCrashed()) {
       TabStats stats;
       stats.is_app = browser_info.browser_is_app;
       stats.is_internal_page = IsInternalPage(contents->GetLastCommittedURL());
@@ -766,6 +767,17 @@ void TabManager::PurgeBackgroundedTabsIfNeeded() {
   }
 }
 
+// MUON(bridiver): see tab_manager.h
+WebContents* TabManager::CreateNullContents(
+    TabStripModel* model, WebContents* old_contents) {
+  return WebContents::Create(WebContents::CreateParams(model->profile()));
+}
+
+// MUON(bridiver): see tab_manager.h
+void TabManager::DestroyOldContents(WebContents* old_contents) {
+  delete old_contents;
+}
+
 WebContents* TabManager::DiscardWebContentsAt(int index,
                                               TabStripModel* model,
                                               DiscardReason reason) {
@@ -781,8 +793,7 @@ WebContents* TabManager::DiscardWebContentsAt(int index,
       "TabManager.Discarding.DiscardedTabHasBeforeUnloadHandler",
       old_contents->NeedToFireBeforeUnload());
 
-  WebContents* null_contents =
-      WebContents::Create(WebContents::CreateParams(model->profile()));
+  WebContents* null_contents = CreateNullContents(model, old_contents);
   // Copy over the state from the navigation controller to preserve the
   // back/forward history and to continue to display the correct title/favicon.
   //
@@ -842,7 +853,8 @@ WebContents* TabManager::DiscardWebContentsAt(int index,
   // TODO(jamescook): This breaks script connections with other tabs.
   // Find a different approach that doesn't do that, perhaps based on
   // RenderFrameProxyHosts.
-  delete old_contents;
+  // MUON(bridiver): see tab_manager.h
+  DestroyOldContents(old_contents);
 
   return null_contents;
 }
diff --git a/chrome/browser/resource_coordinator/tab_manager.h b/chrome/browser/resource_coordinator/tab_manager.h
index 440fdf8df66efce1b68a0463189986a6a0b0353a..7cc8fb11ecb5e2caa67e4e92d6d4526edb2d2001 100644
--- a/chrome/browser/resource_coordinator/tab_manager.h
+++ b/chrome/browser/resource_coordinator/tab_manager.h
@@ -93,6 +93,11 @@ class TabManager : public TabStripModelObserver, public BrowserListObserver {
   TabManager();
   ~TabManager() override;
 
+  // MUON(bridiver): override to create/destroy guests webcontents
+  virtual content::WebContents* CreateNullContents(
+      TabStripModel* model, content::WebContents* old_contents);
+  virtual void DestroyOldContents(content::WebContents* old_contents);
+
   // Number of discard events since Chrome started.
   int discard_count() const { return discard_count_; }
 
@@ -300,6 +305,8 @@ class TabManager : public TabStripModelObserver, public BrowserListObserver {
   // min time to purge times this value.
   const int kDefaultMinMaxTimeToPurgeRatio = 4;
 
+  friend class GuestTabManager;
+
   // Finds TabStripModel which has a WebContents whose id is the given
   // |tab_id|, and returns the WebContents index and the TabStripModel.
   int FindTabStripModelById(int32_t tab_id, TabStripModel** model) const;
diff --git a/chrome/common/BUILD.gn b/chrome/common/BUILD.gn
index d08a945c6b11a918fa5faedcb1c87c269772e877..c45ee400756147e646f76079fafc1718854a4c53 100644
--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -500,6 +500,12 @@ static_library("common") {
     ]
     public_deps += [ "//chrome/common:version_header" ]
   }
+
+  if (!muon_chromium_build && enable_extensions) {
+    sources -= [
+      "extensions/chrome_extensions_client.cc",
+    ]
+  }
 }
 
 process_version("version_header") {
diff --git a/chrome/common/chrome_constants.cc b/chrome/common/chrome_constants.cc
index f32ffad1a95bc31b6571a624333420e88d98913a..dd2a26b9ae57459e0bbd1b558d2721f2f21dea81 100644
--- a/chrome/common/chrome_constants.cc
+++ b/chrome/common/chrome_constants.cc
@@ -10,11 +10,11 @@
 #define FPL FILE_PATH_LITERAL
 
 #if defined(OS_MACOSX)
-#define CHROMIUM_PRODUCT_STRING "Chromium"
+#define CHROMIUM_PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #if defined(GOOGLE_CHROME_BUILD)
-#define PRODUCT_STRING "Google Chrome"
+#define PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #elif defined(CHROMIUM_BUILD)
-#define PRODUCT_STRING "Chromium"
+#define PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #else
 #error Unknown branding
 #endif
@@ -43,13 +43,13 @@ const char kChromeVersion[] = CHROME_VERSION_STRING;
 
 #if defined(OS_WIN)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kBrowserProcessExecutableName[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kHelperProcessExecutableName[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 #elif defined(OS_MACOSX)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
     FPL(CHROMIUM_PRODUCT_STRING);
@@ -61,7 +61,7 @@ const base::FilePath::CharType kHelperProcessExecutableName[] =
     FPL(PRODUCT_STRING " Helper");
 #elif defined(OS_ANDROID)
 // NOTE: Keep it synced with the process names defined in AndroidManifest.xml.
-const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL("chrome");
+const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
     FPL("");
 const base::FilePath::CharType kHelperProcessExecutableName[] =
@@ -69,8 +69,8 @@ const base::FilePath::CharType kHelperProcessExecutableName[] =
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] = FPL("");
 #elif defined(OS_POSIX)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL(EXECUTABLE_NAME);
 // Helper processes end up with a name of "exe" due to execing via
 // /proc/self/exe.  See bug 22703.
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] =
@@ -80,13 +80,13 @@ const base::FilePath::CharType kHelperProcessExecutableName[] = FPL("exe");
 
 #if defined(OS_WIN)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kBrowserProcessExecutablePath[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kHelperProcessExecutablePath[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 #elif defined(OS_MACOSX)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
     FPL(CHROMIUM_PRODUCT_STRING ".app/Contents/MacOS/" CHROMIUM_PRODUCT_STRING);
@@ -98,19 +98,19 @@ const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
 const base::FilePath::CharType kHelperProcessExecutablePath[] =
     FPL(PRODUCT_STRING " Helper.app/Contents/MacOS/" PRODUCT_STRING " Helper");
 #elif defined(OS_ANDROID)
-const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL("chrome");
-const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL("chrome");
+const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL(EXECUTABLE_NAME);
 #elif defined(OS_POSIX)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 #endif  // OS_*
 
 #if defined(OS_MACOSX)
@@ -121,7 +121,7 @@ const base::FilePath::CharType kFrameworkExecutableName[] =
 #endif  // OS_MACOSX
 
 #if defined(OS_WIN)
-const base::FilePath::CharType kBrowserResourcesDll[] = FPL("chrome.dll");
+const base::FilePath::CharType kBrowserResourcesDll[] = FPL("brave.dll");
 const base::FilePath::CharType kStatusTrayWindowClass[] =
     FPL("Chrome_StatusTrayWindow");
 #endif  // defined(OS_WIN)
diff --git a/chrome/common/chrome_paths_mac.mm b/chrome/common/chrome_paths_mac.mm
index cca3bbb41ae25484c3e87c9aba09a8b07741e2b2..57abbcfd90dab7bbf1b5dffc35b17d3ade1a5e1e 100644
--- a/chrome/common/chrome_paths_mac.mm
+++ b/chrome/common/chrome_paths_mac.mm
@@ -40,7 +40,9 @@ NSBundle* OuterAppBundleInternal() {
 
   // From C.app/Contents/Versions/1.2.3.4, go up three steps to get to C.app.
   base::FilePath versioned_dir = chrome::GetVersionedDirectory();
-  base::FilePath outer_app_dir = versioned_dir.DirName().DirName().DirName();
+  // electron uses Frameworks in place of Versions/1.2.3.4
+  // TODO(bridiver) - change this to match chrome
+  base::FilePath outer_app_dir = versioned_dir.DirName().DirName();
   const char* outer_app_dir_c = outer_app_dir.value().c_str();
   NSString* outer_app_dir_ns = [NSString stringWithUTF8String:outer_app_dir_c];
 
diff --git a/chrome/common/chrome_version.h.in b/chrome/common/chrome_version.h.in
index f0a0bcd0098ec31b18bb00588ad8fd11b439fd6f..888572f87a71e6e8444bd6a302343e453aef4287 100644
--- a/chrome/common/chrome_version.h.in
+++ b/chrome/common/chrome_version.h.in
@@ -22,3 +22,5 @@
 // Changelist Information
 
 #define LASTCHANGE_STRING "@LASTCHANGE@"
+
+#define EXECUTABLE_NAME "@EXECUTABLE_NAME@"
diff --git a/chrome/common/importer/edge_importer_utils_win.cc b/chrome/common/importer/edge_importer_utils_win.cc
index c2abd64b2d7c5166c1fdbaaf782974cb4bcc5e53..eb59bbe098dabd0edd3d9d8e24befe1006e56b8b 100644
--- a/chrome/common/importer/edge_importer_utils_win.cc
+++ b/chrome/common/importer/edge_importer_utils_win.cc
@@ -73,7 +73,9 @@ bool IsEdgeFavoritesLegacyMode() {
   // for its favorites.
   if (key.ReadValueDW(L"FavoritesESEEnabled", &ese_enabled) == ERROR_SUCCESS)
     return !ese_enabled;
-  return true;
+  // return true;
+  // No value to read means not legacy mode
+  return false;
 }
 
 bool EdgeImporterCanImport() {
diff --git a/chrome/common/importer/importer_data_types.h b/chrome/common/importer/importer_data_types.h
index 0fc90c62398a93eb89568ce78c8ded2bc9b232b6..50a7d3c0079b7e9c5bc38a4ae3b25eef6d024169 100644
--- a/chrome/common/importer/importer_data_types.h
+++ b/chrome/common/importer/importer_data_types.h
@@ -83,6 +83,7 @@ enum VisitSource {
   VISIT_SOURCE_FIREFOX_IMPORTED = 1,
   VISIT_SOURCE_IE_IMPORTED = 2,
   VISIT_SOURCE_SAFARI_IMPORTED = 3,
+  VISIT_SOURCE_CHROME_IMPORTED = 4,
 };
 
 }  // namespace importer
diff --git a/chrome/common/importer/importer_type.h b/chrome/common/importer/importer_type.h
index c172f8a5bc534465ff4d063a52f9bb510b7e36af..437026ae26eec5dce80edb73929a0fbce870cc37 100644
--- a/chrome/common/importer/importer_type.h
+++ b/chrome/common/importer/importer_type.h
@@ -19,6 +19,8 @@ enum ImporterType {
   TYPE_IE              = 0,
 #endif
   // Value 1 was the (now deleted) Firefox 2 profile importer.
+  // We use it for chrome profile now.
+  TYPE_CHROME          = 1,
   TYPE_FIREFOX         = 2,
 #if defined(OS_MACOSX)
   TYPE_SAFARI          = 3,
diff --git a/chrome/common/importer/profile_import.mojom b/chrome/common/importer/profile_import.mojom
index d5fa210c58244a5c9bc2aed4fa80d903920f604e..3f24c00ba2024fb1a6553d4fc69dae5f71c4d08c 100644
--- a/chrome/common/importer/profile_import.mojom
+++ b/chrome/common/importer/profile_import.mojom
@@ -17,6 +17,9 @@ struct ImportedBookmarkEntry;
 [Native]
 struct ImporterAutofillFormDataEntry;
 
+[Native]
+struct ImportedCookieEntry;
+
 [Native]
 struct SearchEngineInfo;
 
@@ -65,6 +68,8 @@ interface ProfileImportObserver {
   OnAutofillFormDataImportStart(uint32 total_autofill_form_data_entry_count);
   OnAutofillFormDataImportGroup(
       array<ImporterAutofillFormDataEntry> autofill_form_data_entry_group);
+  OnCookiesImportStart(uint32 total_cookies_count);
+  OnCookiesImportGroup(array<ImportedCookieEntry> cookies_group);
   // Windows only:
   OnIE7PasswordReceived(ImporterIE7PasswordInfo importer_password_info);
 };
diff --git a/chrome/common/importer/profile_import.typemap b/chrome/common/importer/profile_import.typemap
index 6283f2bf6871a10f710694772b5da0bc9b70c2ad..d5d1de309cb50eb9f8757d32d0eec3b42d08f9c0 100644
--- a/chrome/common/importer/profile_import.typemap
+++ b/chrome/common/importer/profile_import.typemap
@@ -9,6 +9,7 @@ public_headers = [
   "//chrome/common/importer/importer_data_types.h",
   "//chrome/common/importer/importer_url_row.h",
   "//components/favicon_base/favicon_usage_data.h",
+  "//electron/brave/common/importer/imported_cookie_entry.h",
 ]
 traits_headers =
     [ "//chrome/common/importer/profile_import_process_param_traits.h" ]
@@ -26,4 +27,5 @@ type_mappings = [
   "chrome.mojom.SearchEngineInfo=::importer::SearchEngineInfo",
   "chrome.mojom.SourceProfile=::importer::SourceProfile",
   "chrome.mojom.ImportItem=::importer::ImportItem",
+  "chrome.mojom.ImportedCookieEntry=::ImportedCookieEntry",
 ]
diff --git a/chrome/common/importer/profile_import_process_param_traits_macros.h b/chrome/common/importer/profile_import_process_param_traits_macros.h
index dd005641f4349c017bc65d843d8fe49ec6122f64..07777f1b956cc00ccd679ae88a1c733afa9c74cc 100644
--- a/chrome/common/importer/profile_import_process_param_traits_macros.h
+++ b/chrome/common/importer/profile_import_process_param_traits_macros.h
@@ -23,6 +23,7 @@
 #include "components/favicon_base/favicon_usage_data.h"
 #include "content/public/common/common_param_traits.h"
 #include "ipc/ipc_message_macros.h"
+#include "electron/brave/common/importer/imported_cookie_entry.h"
 
 #if defined(OS_WIN)
 IPC_ENUM_TRAITS_MIN_MAX_VALUE(importer::ImporterType,
@@ -91,4 +92,14 @@ IPC_STRUCT_TRAITS_BEGIN(importer::ImporterIE7PasswordInfo)
   IPC_STRUCT_TRAITS_MEMBER(date_created)
 IPC_STRUCT_TRAITS_END()
 
+IPC_STRUCT_TRAITS_BEGIN(ImportedCookieEntry)
+  IPC_STRUCT_TRAITS_MEMBER(domain)
+  IPC_STRUCT_TRAITS_MEMBER(name)
+  IPC_STRUCT_TRAITS_MEMBER(value)
+  IPC_STRUCT_TRAITS_MEMBER(host)
+  IPC_STRUCT_TRAITS_MEMBER(path)
+  IPC_STRUCT_TRAITS_MEMBER(expiry_date)
+  IPC_STRUCT_TRAITS_MEMBER(secure)
+  IPC_STRUCT_TRAITS_MEMBER(httponly)
+IPC_STRUCT_TRAITS_END()
 #endif  // CHROME_COMMON_IMPORTER_PROFILE_IMPORT_PROCESS_PARAM_TRAITS_MACROS_H_
diff --git a/chrome/common/mac/app_mode_chrome_locator.mm b/chrome/common/mac/app_mode_chrome_locator.mm
index efd272e706ba56b748e4b76b96d76cbd03aa07ac..051851c40e6b721035c6b57ed5b359624d55e525 100644
--- a/chrome/common/mac/app_mode_chrome_locator.mm
+++ b/chrome/common/mac/app_mode_chrome_locator.mm
@@ -80,6 +80,7 @@ bool GetChromeBundleInfo(const base::FilePath& chrome_bundle,
   // on the data in their plist, so encode the framework names here.
   NSDictionary* framework_for_exe = @{
     @"Chromium": @"Chromium",
+    @"Brave": @"Brave",
     @"Google Chrome": @"Google Chrome",
     @"Google Chrome Canary": @"Google Chrome",
   };
diff --git a/chrome/common/media/cdm_host_file_path.cc b/chrome/common/media/cdm_host_file_path.cc
index 7d8030b41998f5075c39554763edca87b8120230..29fdd5664b5231647ee34c7331ef864682e97187 100644
--- a/chrome/common/media/cdm_host_file_path.cc
+++ b/chrome/common/media/cdm_host_file_path.cc
@@ -18,7 +18,7 @@
 #include "chrome/common/chrome_constants.h"
 #endif
 
-#if defined(GOOGLE_CHROME_BUILD)
+#if defined(GOOGLE_CHROME_BUILD) || !defined(MUON_CHROMIUM_BUILD)
 
 namespace {
 
diff --git a/chrome/install_static/user_data_dir.cc b/chrome/install_static/user_data_dir.cc
index b5f779d03cfec8ce1db9354d85020acaa10c3a5b..04db5469f8b3705bbf0c36fe6eef5ce1aeaa3355 100644
--- a/chrome/install_static/user_data_dir.cc
+++ b/chrome/install_static/user_data_dir.cc
@@ -74,6 +74,10 @@ bool GetUserDataDirectoryUsingProcessCommandLine(
 // Unify this with the Browser Distribution code.
 bool GetDefaultUserDataDirectory(const InstallConstants& mode,
                                  std::wstring* result) {
+#if !defined(MUON_CHROMIUM_BUILD)
+  result->append(GetEnvironmentString16(L"CHROME_USER_DATA_DIR"));
+  return true;
+#endif
   // This environment variable should be set on Windows Vista and later
   // (https://msdn.microsoft.com/library/windows/desktop/dd378457.aspx).
   std::wstring user_data_dir = GetEnvironmentString16(L"LOCALAPPDATA");
diff --git a/chrome/installer/util/browser_distribution.cc b/chrome/installer/util/browser_distribution.cc
index ac6a3e41ef2c4e82eab088b39abc0d17c4db0f0e..5149d6638b5146d8dc21aed5cc508d613c26fd69 100644
--- a/chrome/installer/util/browser_distribution.cc
+++ b/chrome/installer/util/browser_distribution.cc
@@ -20,6 +20,10 @@
 #include "chrome/installer/util/l10n_string_util.h"
 #include "chrome/installer/util/non_updating_app_registration_data.h"
 
+#if !defined(MUON_CHROMIUM_BUILD)
+#include "chrome/installer/util/muon_distribution.h"
+#endif
+
 namespace {
 
 // The BrowserDistribution object is never freed.
@@ -55,6 +59,7 @@ BrowserDistribution* BrowserDistribution::GetOrCreateBrowserDistribution(
 BrowserDistribution* BrowserDistribution::GetDistribution() {
   BrowserDistribution* dist = NULL;
 
+#if defined(MUON_CHROMIUM_BUILD)
 #if defined(GOOGLE_CHROME_BUILD)
   dist = GetOrCreateBrowserDistribution<GoogleChromeDistribution>(
       &g_browser_distribution);
@@ -62,7 +67,10 @@ BrowserDistribution* BrowserDistribution::GetDistribution() {
   dist = GetOrCreateBrowserDistribution<BrowserDistribution>(
       &g_browser_distribution);
 #endif
-
+#else
+  dist = GetOrCreateBrowserDistribution<MuonDistribution>(
+      &g_browser_distribution);
+#endif
   return dist;
 }
 
diff --git a/chrome/installer/util/prebuild/create_string_rc.py b/chrome/installer/util/prebuild/create_string_rc.py
index d7734d8883c3e438ece3d509b7bb331931831178..6e6cdda19c271de7e5429db02b3e17b2d676b46f 100755
--- a/chrome/installer/util/prebuild/create_string_rc.py
+++ b/chrome/installer/util/prebuild/create_string_rc.py
@@ -109,6 +109,9 @@ MODE_SPECIFIC_STRINGS = {
     'chromium': [
       'IDS_APP_SHORTCUTS_SUBDIR_NAME',
     ],
+    'brave': [
+      'IDS_APP_SHORTCUTS_SUBDIR_NAME',
+    ],
   },
   'IDS_INBOUND_MDNS_RULE_DESCRIPTION': {
     'google_chrome': [
@@ -120,6 +123,9 @@ MODE_SPECIFIC_STRINGS = {
     'chromium': [
       'IDS_INBOUND_MDNS_RULE_DESCRIPTION',
     ],
+    'brave': [
+      'IDS_INBOUND_MDNS_RULE_DESCRIPTION',
+    ],
   },
   'IDS_INBOUND_MDNS_RULE_NAME': {
     'google_chrome': [
@@ -131,6 +137,9 @@ MODE_SPECIFIC_STRINGS = {
     'chromium': [
       'IDS_INBOUND_MDNS_RULE_NAME',
     ],
+    'brave': [
+      'IDS_INBOUND_MDNS_RULE_NAME',
+    ],
   },
   # In contrast to the strings above, this one (IDS_PRODUCT_NAME) is used
   # throughout Chrome in mode-independent contexts. Within the installer (the
@@ -146,6 +155,9 @@ MODE_SPECIFIC_STRINGS = {
     'chromium': [
       'IDS_PRODUCT_NAME',
     ],
+    'brave': [
+      'IDS_PRODUCT_NAME',
+    ],
   },
 }
 # Note: Update the test expectations in GetBaseMessageIdForMode.GoogleStringIds
diff --git a/chrome/renderer/BUILD.gn b/chrome/renderer/BUILD.gn
index 3f68c173d1c2f233c0b69fefa162df97b1e7ee69..ab93976eed7f2feb0f627e11ba4b3624b98b37ec 100644
--- a/chrome/renderer/BUILD.gn
+++ b/chrome/renderer/BUILD.gn
@@ -414,6 +414,19 @@ static_library("renderer") {
       "searchbox/searchbox_extension.h",
     ]
   }
+
+  if (!muon_chromium_build) {
+    sources -= [
+      "content_settings_observer.cc",
+      "content_settings_observer.h",
+    ]
+
+    if (enable_extensions) {
+      sources -= [
+        "extensions/chrome_extensions_dispatcher_delegate.cc",
+      ]
+    }
+  }
 }
 
 static_library("test_support") {
diff --git a/chrome/renderer/chrome_content_renderer_client.cc b/chrome/renderer/chrome_content_renderer_client.cc
index 47aceed2a5138e4eb7bf1cfa2cfc6f13ff78fe71..eecfd302b5097ec0ec06f736803c9c47b69e1de1 100644
--- a/chrome/renderer/chrome_content_renderer_client.cc
+++ b/chrome/renderer/chrome_content_renderer_client.cc
@@ -1517,6 +1517,7 @@ ChromeContentRendererClient::CreateBrowserPluginDelegate(
 #endif
 }
 
+#if 0
 void ChromeContentRendererClient::RecordRappor(const std::string& metric,
                                                const std::string& sample) {
   if (!rappor_recorder_) {
@@ -1534,6 +1535,7 @@ void ChromeContentRendererClient::RecordRapporURL(const std::string& metric,
   }
   rappor_recorder_->RecordRapporURL(metric, url);
 }
+#endif  // 0
 
 void ChromeContentRendererClient::AddImageContextMenuProperties(
     const WebURLResponse& response,
diff --git a/chrome/renderer/chrome_content_renderer_client.h b/chrome/renderer/chrome_content_renderer_client.h
index 691d07ff66e08562701b2e537b00bb41b6da3667..f7eb6521853ddaf0edfd1e11f609f26188c3651a 100644
--- a/chrome/renderer/chrome_content_renderer_client.h
+++ b/chrome/renderer/chrome_content_renderer_client.h
@@ -191,9 +191,9 @@ class ChromeContentRendererClient
       content::RenderFrame* render_frame,
       const std::string& mime_type,
       const GURL& original_url) override;
-  void RecordRappor(const std::string& metric,
-                    const std::string& sample) override;
-  void RecordRapporURL(const std::string& metric, const GURL& url) override;
+  //void RecordRappor(const std::string& metric,
+  //                  const std::string& sample) override;
+  //void RecordRapporURL(const std::string& metric, const GURL& url) override;
   void AddImageContextMenuProperties(
       const blink::WebURLResponse& response,
       bool is_image_in_context_a_placeholder_image,
diff --git a/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc b/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
index 12d432198186daf817c0b903af985b05ce17cda2..ddbfdb1765d6f8505c35a70b9465b99d8245a529 100644
--- a/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
+++ b/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
@@ -100,11 +100,11 @@ ChromeRendererPepperHostFactory::CreateResourceHost(
   // time of the corresponding instance's method calls.  Currently these
   // interfaces are available only for whitelisted apps which may not have
   // access to the other private interfaces.
-  switch (message.type()) {
-    case PpapiHostMsg_UMA_Create::ID: {
-      return base::MakeUnique<PepperUMAHost>(host_, instance, resource);
-    }
-  }
+  // switch (message.type()) {
+  //   case PpapiHostMsg_UMA_Create::ID: {
+  //     return base::MakeUnique<PepperUMAHost>(host_, instance, resource);
+  //   }
+  // }
 
   return nullptr;
 }
diff --git a/chrome/utility/importer/external_process_importer_bridge.h b/chrome/utility/importer/external_process_importer_bridge.h
index 7e05c4e04f8e61b418d373a73bd8901347df4c76..e7e6d9fa5e0d54c7755fe3a38eca6f70a902411c 100644
--- a/chrome/utility/importer/external_process_importer_bridge.h
+++ b/chrome/utility/importer/external_process_importer_bridge.h
@@ -86,6 +86,7 @@ class ExternalProcessImporterBridge : public ImporterBridge {
 
  private:
   ~ExternalProcessImporterBridge() override;
+  friend class BraveExternalProcessImporterBridge;
 
   // Holds strings needed by the external importer because the resource
   // bundle isn't available to the external process.
diff --git a/chrome/utility/importer/firefox_importer.cc b/chrome/utility/importer/firefox_importer.cc
index cf98536e46b057d11b76e810e8e4348872855a2d..b243aca10dcc93ec5b7a99d368d0f62024d1d32b 100644
--- a/chrome/utility/importer/firefox_importer.cc
+++ b/chrome/utility/importer/firefox_importer.cc
@@ -161,14 +161,12 @@ void FirefoxImporter::StartImport(const importer::SourceProfile& source_profile,
   if ((items & importer::PASSWORDS) && !cancelled()) {
     bridge_->NotifyItemStarted(importer::PASSWORDS);
     ImportPasswords();
-    bridge_->NotifyItemEnded(importer::PASSWORDS);
   }
   if ((items & importer::AUTOFILL_FORM_DATA) && !cancelled()) {
     bridge_->NotifyItemStarted(importer::AUTOFILL_FORM_DATA);
     ImportAutofillFormData();
     bridge_->NotifyItemEnded(importer::AUTOFILL_FORM_DATA);
   }
-  bridge_->NotifyEnded();
 }
 
 void FirefoxImporter::ImportHistory() {
diff --git a/chrome/utility/importer/firefox_importer.h b/chrome/utility/importer/firefox_importer.h
index 8c6dafc83d25a697a6ca235faf4e0dc386a8828b..f6465167a32f27c496caaa4015a9cd10d83cd9a5 100644
--- a/chrome/utility/importer/firefox_importer.h
+++ b/chrome/utility/importer/firefox_importer.h
@@ -54,7 +54,9 @@ class FirefoxImporter : public Importer {
 
   using FaviconMap = std::map<int64_t, std::set<GURL>>;
 
+ protected:
   ~FirefoxImporter() override;
+ private:
 
   FRIEND_TEST_ALL_PREFIXES(FirefoxImporterTest, ImportBookmarksV25);
   void ImportBookmarks();
diff --git a/chrome/utility/importer/profile_import_impl.h b/chrome/utility/importer/profile_import_impl.h
index 4fb2499aa536d3618df2bbc4072fb23420f42c2e..65b6268d8d85545799a6a47e59b4adb7c0e5fa45 100644
--- a/chrome/utility/importer/profile_import_impl.h
+++ b/chrome/utility/importer/profile_import_impl.h
@@ -35,6 +35,7 @@ class ProfileImportImpl : public chrome::mojom::ProfileImport {
   ~ProfileImportImpl() override;
 
  private:
+  friend class BraveProfileImportImpl;
   // chrome::mojom::ProfileImport:
   void StartImport(const importer::SourceProfile& source_profile,
                    uint16_t items,
diff --git a/chrome/utility/importer/profile_import_service.h b/chrome/utility/importer/profile_import_service.h
index c4c5f83886574956b3abdfa77a07500a2ee6de9e..edbfde3c41a1e38bcdedd09aaa41d8a1ab3ab03b 100644
--- a/chrome/utility/importer/profile_import_service.h
+++ b/chrome/utility/importer/profile_import_service.h
@@ -24,6 +24,7 @@ class ProfileImportService : public service_manager::Service {
                        mojo::ScopedMessagePipeHandle interface_pipe) override;
 
  private:
+  friend class BraveProfileImportService;
   // State needed to manage service lifecycle and lifecycle of bound clients.
   std::unique_ptr<service_manager::ServiceContextRefFactory> ref_factory_;
   service_manager::BinderRegistry registry_;
diff --git a/components/crash/content/app/breakpad_linux.cc b/components/crash/content/app/breakpad_linux.cc
index c72cd3622b86d29a66f2e003cd4331e99a0aa68c..5b48960f3042c0aecb2228272a36152273b8ed65 100644
--- a/components/crash/content/app/breakpad_linux.cc
+++ b/components/crash/content/app/breakpad_linux.cc
@@ -86,8 +86,10 @@ namespace breakpad {
 
 namespace {
 
-#if !defined(OS_CHROMEOS)
+#if !defined(OS_CHROMEOS) && defined(MUON_CHROMIUM_BUILD)
 const char kUploadURL[] = "https://clients2.google.com/cr/report";
+#else
+const char kUploadURL[] = "https://laptop-updates.brave.com/1/crashes";
 #endif
 
 bool g_is_crash_reporter_enabled = false;
@@ -1342,6 +1344,7 @@ void ExecUploadProcessOrTerminate(const BreakpadInfo& info,
     header_content_type,
     post_file,
     kUploadURL,
+    "--quiet",
     "--timeout=10",  // Set a timeout so we don't hang forever.
     "--tries=1",     // Don't retry if the upload fails.
     "-O",  // Output reply to the file descriptor path.
@@ -1884,6 +1887,7 @@ void HandleCrashDump(const BreakpadInfo& info) {
 
         const size_t kCrashIdLength = 16;
         char id_buf[kCrashIdLength + 1];
+
         size_t bytes_read =
             WaitForCrashReportUploadProcess(fds[0], kCrashIdLength, id_buf);
         HandleCrashReportId(id_buf, bytes_read, kCrashIdLength);
diff --git a/components/crash/content/app/crashpad_mac.mm b/components/crash/content/app/crashpad_mac.mm
index 6508c2a067609897ea14b96b3852fa3bcf31cc65..27c0545722cf50d2a0a46f36d5e2b9f35d52406f 100644
--- a/components/crash/content/app/crashpad_mac.mm
+++ b/components/crash/content/app/crashpad_mac.mm
@@ -54,6 +54,8 @@ base::FilePath PlatformCrashpadInitialization(
       // Only allow the possibility of report upload in official builds. This
       // crash server won't have symbols for any other build types.
       std::string url = "https://clients2.google.com/cr/report";
+#elif !defined(MUON_CHROMIUM_BUILD)
+      std::string url = "https://laptop-updates.brave.com/1/crashes";
 #else
       std::string url;
 #endif
diff --git a/components/crash/content/app/crashpad_win.cc b/components/crash/content/app/crashpad_win.cc
index a5d1afc409f4186f2cb93a40c30fa8329e1622fa..e20d203e8161cd40d2a50e0201ab95d367cbba6b 100644
--- a/components/crash/content/app/crashpad_win.cc
+++ b/components/crash/content/app/crashpad_win.cc
@@ -82,6 +82,8 @@ base::FilePath PlatformCrashpadInitialization(
 
 #if defined(GOOGLE_CHROME_BUILD)
     std::string url = "https://clients2.google.com/cr/report";
+#elif !defined(MUON_CHROMIUM_BUILD)
+    std::string url = "https://laptop-updates.brave.com/1/crashes";
 #else
     std::string url;
 #endif
diff --git a/components/crash/core/browser/resources/crashes.js b/components/crash/core/browser/resources/crashes.js
index dbd2ae8df59756c61d28091cff70098c897db8f4..84fbc695c817c87deb902d8b6f69d3f1ec762ccb 100644
--- a/components/crash/core/browser/resources/crashes.js
+++ b/components/crash/core/browser/resources/crashes.js
@@ -105,9 +105,9 @@ function updateCrashList(
         // https://bugs.chromium.org/p/monorail/issues/detail?id=1488 is done.
         labels: 'Restrict-View-EditIssue,Stability-Crash,User-Submitted',
       };
-      var href = 'https://code.google.com/p/chromium/issues/entry';
+      var href = 'https://github.com/brave/browser-laptop/issues/new';
       for (var param in params) {
-        href = appendParam(href, param, params[param]);
+        // href = appendParam(href, param, params[param]);
       }
       link.href = href;
       link.target = '_blank';
diff --git a/components/guest_view/browser/guest_view_base.cc b/components/guest_view/browser/guest_view_base.cc
index 9a4a5613f9e072d35d8b965b5454060601d9f524..43135cd561c4651d1c0bc7f62e0cff8d3bd8d5d3 100644
--- a/components/guest_view/browser/guest_view_base.cc
+++ b/components/guest_view/browser/guest_view_base.cc
@@ -439,8 +439,12 @@ void GuestViewBase::DidDetach() {
   owner_web_contents()->GetRenderViewHost()->Send(
       new GuestViewMsg_GuestDetached(element_instance_id_));
   element_instance_id_ = kInstanceIDNone;
-  if (ShouldDestroyOnDetach())
+  if (ShouldDestroyOnDetach()) {
     Destroy(true);
+  } else {
+    // Give the derived class an opportunity to perform some actions.
+    DidDetachFromEmbedder();
+  }
 }
 
 WebContents* GuestViewBase::GetOwnerWebContents() const {
diff --git a/components/guest_view/browser/guest_view_base.h b/components/guest_view/browser/guest_view_base.h
index da1748a87d0e2cc4efed512bfdd9c09b0092ff5a..c252368370a9873e7ffe3d5b72749f74975ae982 100644
--- a/components/guest_view/browser/guest_view_base.h
+++ b/components/guest_view/browser/guest_view_base.h
@@ -247,6 +247,9 @@ class GuestViewBase : public content::BrowserPluginGuestDelegate,
   // an opportunity to perform setup actions after attachment.
   virtual void DidAttachToEmbedder() {}
 
+  // This method is called after the guest has been detached from an embedder
+  virtual void DidDetachFromEmbedder() {}
+
   // This method is called after this GuestViewBase has been initiated.
   //
   // This gives the derived class an opportunity to perform additional
diff --git a/components/guest_view/browser/guest_view_manager.cc b/components/guest_view/browser/guest_view_manager.cc
index 0738b6917057019a9e006a3a34fcf6164017cb46..ce3de6082c9ad8014d80a216f0c23c06d929d354 100644
--- a/components/guest_view/browser/guest_view_manager.cc
+++ b/components/guest_view/browser/guest_view_manager.cc
@@ -67,6 +67,9 @@ class GuestViewManager::EmbedderRenderProcessHostObserver
   int id_;
 };
 
+// static
+GuestViewManager* manager_ = nullptr;
+
 GuestViewManager::GuestViewManager(
     content::BrowserContext* context,
     std::unique_ptr<GuestViewManagerDelegate> delegate)
@@ -90,8 +93,9 @@ GuestViewManager* GuestViewManager::CreateWithDelegate(
     } else {
       guest_manager = new GuestViewManager(context, std::move(delegate));
     }
-    context->SetUserData(kGuestViewManagerKeyName,
-                         base::WrapUnique(guest_manager));
+    manager_ = guest_manager;
+    //context->SetUserData(kGuestViewManagerKeyName,
+    //                     base::WrapUnique(guest_manager));
   }
   return guest_manager;
 }
@@ -99,8 +103,9 @@ GuestViewManager* GuestViewManager::CreateWithDelegate(
 // static
 GuestViewManager* GuestViewManager::FromBrowserContext(
     BrowserContext* context) {
-  return static_cast<GuestViewManager*>(context->GetUserData(
-      kGuestViewManagerKeyName));
+  //return static_cast<GuestViewManager*>(context->GetUserData(
+  //    kGuestViewManagerKeyName));
+  return manager_;
 }
 
 // static
diff --git a/components/metrics/metrics_service_accessor.cc b/components/metrics/metrics_service_accessor.cc
index 467210af09ccba687fad513c5a43047a43a7e5a0..a109474bc5988060884257bfeca93a8360c40529 100644
--- a/components/metrics/metrics_service_accessor.cc
+++ b/components/metrics/metrics_service_accessor.cc
@@ -16,7 +16,7 @@ namespace metrics {
 // static
 bool MetricsServiceAccessor::IsMetricsReportingEnabled(
     PrefService* pref_service) {
-#if defined(GOOGLE_CHROME_BUILD)
+#if defined(GOOGLE_CHROME_BUILD) || !defined(MUON_CHROMIUM_BUILD)
   // In official builds, disable metrics when reporting field trials are
   // forced; otherwise, use the value of the user's preference to determine
   // whether to enable metrics reporting.
diff --git a/components/os_crypt/key_storage_libsecret.cc b/components/os_crypt/key_storage_libsecret.cc
index a1b5b975bc89c4891643adab17ce0b00ba2a8032..229928f2381eaecf6d3180109dd9aaa7725a010e 100644
--- a/components/os_crypt/key_storage_libsecret.cc
+++ b/components/os_crypt/key_storage_libsecret.cc
@@ -5,6 +5,7 @@
 #include "components/os_crypt/key_storage_libsecret.h"
 
 #include "base/base64.h"
+#include "base/command_line.h"
 #include "base/rand_util.h"
 #include "base/strings/string_number_conversions.h"
 #include "components/os_crypt/libsecret_util_linux.h"
@@ -73,6 +74,12 @@ std::string KeyStorageLibsecret::AddRandomPasswordInLibsecret() {
 
 std::string KeyStorageLibsecret::GetKeyImpl() {
   LibsecretAttributesBuilder attrs;
+  const char *kApplicationName;
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("import-chrome")) {
+    kApplicationName = "chrome";
+  } else {
+    kApplicationName = ::kApplicationName;
+  }
   attrs.Append("application", kApplicationName);
 
   LibsecretLoader::SearchHelper helper;
diff --git a/components/os_crypt/keychain_password_mac.mm b/components/os_crypt/keychain_password_mac.mm
index 2b38db266f9aa1f4141c8649c021042ede4e5589..ea0387b11f4b00f87596d738c152aa4cc43b2beb 100644
--- a/components/os_crypt/keychain_password_mac.mm
+++ b/components/os_crypt/keychain_password_mac.mm
@@ -7,6 +7,7 @@
 #import <Security/Security.h>
 
 #include "base/base64.h"
+#include "base/command_line.h"
 #include "base/mac/mac_logging.h"
 #include "base/rand_util.h"
 #include "crypto/apple_keychain.h"
@@ -61,6 +62,14 @@ const char KeychainPassword::account_name[] = "Chromium";
 std::string KeychainPassword::GetPassword() const {
   UInt32 password_length = 0;
   void* password_data = NULL;
+  const char *service_name, *account_name;
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("import-chrome")) {
+    service_name = "Chrome Safe Storage";
+    account_name = "Chrome";
+  } else {
+    service_name = ::KeychainPassword::service_name;
+    account_name = ::KeychainPassword::account_name;
+  }
   OSStatus error = keychain_.FindGenericPassword(
       nullptr, strlen(service_name), service_name, strlen(account_name),
       account_name, &password_length, &password_data, NULL);
diff --git a/components/ssl_config/ssl_config_service_manager_pref.cc b/components/ssl_config/ssl_config_service_manager_pref.cc
index f924fe268f0334d522898ffcc51d82e39fc77a8f..42bac4005b86ccec4d5a45b2c8067e4c923980f0 100644
--- a/components/ssl_config/ssl_config_service_manager_pref.cc
+++ b/components/ssl_config/ssl_config_service_manager_pref.cc
@@ -298,10 +298,14 @@ void SSLConfigServiceManagerPref::GetSSLConfigFromPrefs(
     net::SSLConfig* config) {
   // rev_checking_enabled was formerly a user-settable preference, but now
   // it is managed-only.
+#if defined(MUON_CHROMIUM_BUILD)
   if (rev_checking_enabled_.IsManaged())
     config->rev_checking_enabled = rev_checking_enabled_.GetValue();
   else
     config->rev_checking_enabled = false;
+#else
+  config->rev_checking_enabled = rev_checking_enabled_.GetValue();
+#endif
   config->rev_checking_required_local_anchors =
       rev_checking_required_local_anchors_.GetValue();
   config->sha1_local_anchors_enabled = sha1_local_anchors_enabled_.GetValue();
diff --git a/components/viz/common/BUILD.gn b/components/viz/common/BUILD.gn
index b1f1c511c79360cf52bea03a84199b540feac507..7f80c1f0eb2918e7d46a884299e087524ac74d4b 100644
--- a/components/viz/common/BUILD.gn
+++ b/components/viz/common/BUILD.gn
@@ -119,6 +119,8 @@ viz_component("common") {
     "resources/single_release_callback.h",
     "resources/transferable_resource.cc",
     "resources/transferable_resource.h",
+    "surfaces/child_local_surface_id_allocator.cc",
+    "surfaces/child_local_surface_id_allocator.h",
     "surfaces/frame_sink_id.cc",
     "surfaces/frame_sink_id.h",
     "surfaces/frame_sink_id_allocator.h",
@@ -195,6 +197,8 @@ viz_source_set("unit_tests") {
     "quads/render_pass_unittest.cc",
     "resources/platform_color_unittest.cc",
     "surfaces/surface_sequence_generator_unittest.cc",
+    "surfaces/child_local_surface_id_allocator_unittest.cc",
+    "surfaces/parent_local_surface_id_allocator_unittest.cc",
     "yuv_readback_unittest.cc",
   ]
 
diff --git a/components/viz/common/surfaces/parent_local_surface_id_allocator.cc b/components/viz/common/surfaces/parent_local_surface_id_allocator.cc
index a5a5512f3d7fd7efdce8f761616f7b8451fb24c0..2fa2bc4a3adc580b71f174102f5d56b67243308a 100644
--- a/components/viz/common/surfaces/parent_local_surface_id_allocator.cc
+++ b/components/viz/common/surfaces/parent_local_surface_id_allocator.cc
@@ -4,21 +4,43 @@
 
 #include "components/viz/common/surfaces/parent_local_surface_id_allocator.h"
 
-#include <stdint.h>
-
 #include "base/rand_util.h"
-#include "base/unguessable_token.h"
 
 namespace viz {
 
-ParentLocalSurfaceIdAllocator::ParentLocalSurfaceIdAllocator() : next_id_(1u) {}
+namespace {
+constexpr uint32_t kInvalidParentSequenceNumber = 0;
+constexpr uint32_t kInitialChildSequenceNumber = 1;
+}  // namespace
+
+ParentLocalSurfaceIdAllocator::ParentLocalSurfaceIdAllocator()
+    : last_known_local_surface_id_(kInvalidParentSequenceNumber,
+                                   kInitialChildSequenceNumber,
+                                   base::UnguessableToken()) {}
+
+const LocalSurfaceId& ParentLocalSurfaceIdAllocator::UpdateFromChild(
+    const LocalSurfaceId& child_allocated_local_surface_id) {
+  DCHECK_GE(child_allocated_local_surface_id.child_sequence_number(),
+            last_known_local_surface_id_.child_sequence_number());
+
+  last_known_local_surface_id_ =
+      LocalSurfaceId(last_known_local_surface_id_.parent_sequence_number(),
+                     child_allocated_local_surface_id.child_sequence_number(),
+                     last_known_local_surface_id_.nonce());
+  return last_known_local_surface_id_;
+}
 
-ParentLocalSurfaceIdAllocator::~ParentLocalSurfaceIdAllocator() {}
+void ParentLocalSurfaceIdAllocator::Reset(
+    const LocalSurfaceId& local_surface_id) {
+  last_known_local_surface_id_ = local_surface_id;
+}
 
-LocalSurfaceId ParentLocalSurfaceIdAllocator::GenerateId() {
-  LocalSurfaceId id(next_id_, base::UnguessableToken::Create());
-  next_id_++;
-  return id;
+const LocalSurfaceId& ParentLocalSurfaceIdAllocator::GenerateId() {
+  last_known_local_surface_id_ =
+      LocalSurfaceId(last_known_local_surface_id_.parent_sequence_number() + 1,
+                     last_known_local_surface_id_.child_sequence_number(),
+                     base::UnguessableToken::Create());
+  return last_known_local_surface_id_;
 }
 
 }  // namespace viz
diff --git a/components/viz/common/surfaces/parent_local_surface_id_allocator.h b/components/viz/common/surfaces/parent_local_surface_id_allocator.h
index d30d27227a4cf86bfbf355c1007c46098a361958..a1b32a9883fee1658b1b7c5166c0c96c2e3409c3 100644
--- a/components/viz/common/surfaces/parent_local_surface_id_allocator.h
+++ b/components/viz/common/surfaces/parent_local_surface_id_allocator.h
@@ -8,6 +8,7 @@
 #include <stdint.h>
 
 #include "base/macros.h"
+#include "base/unguessable_token.h"
 #include "components/viz/common/surfaces/surface_id.h"
 #include "components/viz/common/viz_common_export.h"
 
@@ -21,12 +22,29 @@ namespace viz {
 class VIZ_COMMON_EXPORT ParentLocalSurfaceIdAllocator {
  public:
   ParentLocalSurfaceIdAllocator();
-  ~ParentLocalSurfaceIdAllocator();
+  ParentLocalSurfaceIdAllocator(ParentLocalSurfaceIdAllocator&& other) =
+      default;
+  ParentLocalSurfaceIdAllocator& operator=(
+      ParentLocalSurfaceIdAllocator&& other) = default;
+  ~ParentLocalSurfaceIdAllocator() = default;
 
-  LocalSurfaceId GenerateId();
+  // When a child-allocated LocalSurfaceId arrives in the parent, the parent
+  // needs to update its understanding of the last generated message so the
+  // messages can continue to monotonically increase.
+  const LocalSurfaceId& UpdateFromChild(
+      const LocalSurfaceId& child_allocated_local_surface_id);
+
+  // Resets this allocator with the provided |local_surface_id| as a seed.
+  void Reset(const LocalSurfaceId& local_surface_id);
+
+  const LocalSurfaceId& GenerateId();
+
+  const LocalSurfaceId& last_known_local_surface_id() const {
+    return last_known_local_surface_id_;
+  }
 
  private:
-  uint32_t next_id_;
+  LocalSurfaceId last_known_local_surface_id_;
 
   DISALLOW_COPY_AND_ASSIGN(ParentLocalSurfaceIdAllocator);
 };
diff --git a/content/app/content_main_runner.cc b/content/app/content_main_runner.cc
index 61d38021262f80337b45fe592128b9955d8c2f01..f0dd54b962e3d6c3588f7ef83e90831f52395da0 100644
--- a/content/app/content_main_runner.cc
+++ b/content/app/content_main_runner.cc
@@ -637,7 +637,7 @@ class ContentMainRunnerImpl : public ContentMainRunner {
 
     InitializeV8IfNeeded(command_line, process_type);
 
-#if !defined(OFFICIAL_BUILD)
+#if 0
 #if defined(OS_WIN)
     bool should_enable_stack_dump = !process_type.empty();
 #else
@@ -653,7 +653,7 @@ class ContentMainRunnerImpl : public ContentMainRunner {
             service_manager::switches::kDisableInProcessStackTraces)) {
       base::debug::EnableInProcessStackDumping();
     }
-#endif  // !defined(OFFICIAL_BUILD)
+#endif  // 0
 
     if (delegate_)
       delegate_->PreSandboxStartup();
diff --git a/content/browser/browser_plugin/browser_plugin_guest.cc b/content/browser/browser_plugin/browser_plugin_guest.cc
index cb122b1bcdb3787276ec98f51d40fe417eb07748..186982f063bdffe3cb5070e7d7cbdf477c94535a 100644
--- a/content/browser/browser_plugin/browser_plugin_guest.cc
+++ b/content/browser/browser_plugin/browser_plugin_guest.cc
@@ -372,17 +372,18 @@ void BrowserPluginGuest::InitInternal(
 
   DCHECK(GetWebContents()->GetRenderViewHost());
 
-  // Initialize the device scale factor by calling |NotifyScreenInfoChanged|.
-  auto* render_widget_host = RenderWidgetHostImpl::From(
-      GetWebContents()->GetRenderViewHost()->GetWidget());
-  render_widget_host->NotifyScreenInfoChanged();
-
   // TODO(chrishtr): this code is wrong. The navigate_on_drag_drop field will
   // be reset again the next time preferences are updated.
   WebPreferences prefs =
       GetWebContents()->GetRenderViewHost()->GetWebkitPreferences();
   prefs.navigate_on_drag_drop = false;
   GetWebContents()->GetRenderViewHost()->UpdateWebkitPreferences(prefs);
+
+  base::Optional<viz::LocalSurfaceId> child_local_surface_id;
+  if (local_surface_id_.is_valid())
+    child_local_surface_id = local_surface_id_;
+  SendMessageToEmbedder(std::make_unique<BrowserPluginMsg_Attach_ACK>(
+      browser_plugin_instance_id(), child_local_surface_id));
 }
 
 BrowserPluginGuest::~BrowserPluginGuest() {
@@ -881,6 +882,8 @@ void BrowserPluginGuest::OnDetach(int browser_plugin_instance_id) {
   }
 
   delegate_->DidDetach();
+  // MUON(bbondy): Make sure GetGuestProxyRoutingID gets new info on re-attach
+  guest_proxy_routing_id_ = MSG_ROUTING_NONE;
 }
 
 void BrowserPluginGuest::OnDragStatusUpdate(int browser_plugin_instance_id,
@@ -1080,9 +1083,10 @@ void BrowserPluginGuest::OnUpdateResizeParams(
     const ScreenInfo& screen_info,
     uint64_t sequence_number,
     const viz::LocalSurfaceId& local_surface_id) {
-  if ((frame_rect_.size() != frame_rect.size() ||
-       screen_info_ != screen_info) &&
-      local_surface_id_ == local_surface_id) {
+  if (local_surface_id_ > local_surface_id ||
+      ((frame_rect_.size() != frame_rect.size() ||
+        screen_info_ != screen_info) &&
+       local_surface_id_ == local_surface_id)) {
     SiteInstance* owner_site_instance = delegate_->GetOwnerSiteInstance();
     bad_message::ReceivedBadMessage(
         owner_site_instance->GetProcess(),
diff --git a/content/browser/frame_host/render_frame_message_filter.cc b/content/browser/frame_host/render_frame_message_filter.cc
index 6e105e13b6c5624e2a879471128a90951843e1c4..fe305b57d19f19494cd89ea7af6ae2592405d197 100644
--- a/content/browser/frame_host/render_frame_message_filter.cc
+++ b/content/browser/frame_host/render_frame_message_filter.cc
@@ -572,7 +572,7 @@ void RenderFrameMessageFilter::GetPluginsCallback(
   PluginServiceFilter* filter = PluginServiceImpl::GetInstance()->GetFilter();
   std::vector<WebPluginInfo> plugins;
 
-  int child_process_id = -1;
+  int child_process_id = render_process_id_;
   int routing_id = MSG_ROUTING_NONE;
   // In this loop, copy the WebPluginInfo (and do not use a reference) because
   // the filter might mutate it.
diff --git a/content/browser/frame_host/render_widget_host_view_guest.cc b/content/browser/frame_host/render_widget_host_view_guest.cc
index 9c03e285ca6a60d383ba8fd2295895fe2a2f5ac9..79cd9241964a26c4725735a1105faf479822115b 100644
--- a/content/browser/frame_host/render_widget_host_view_guest.cc
+++ b/content/browser/frame_host/render_widget_host_view_guest.cc
@@ -169,11 +169,9 @@ void RenderWidgetHostViewGuest::Hide() {
 }
 
 void RenderWidgetHostViewGuest::SetSize(const gfx::Size& size) {
-  host_->WasResized();
 }
 
 void RenderWidgetHostViewGuest::SetBounds(const gfx::Rect& rect) {
-  SetSize(rect.size());
 }
 
 void RenderWidgetHostViewGuest::Focus() {
diff --git a/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm b/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
index 83a8792dbe1ee56e7541828861253b2d5d39cc22..52515549ce39704a701847d14143c493ff3c9050 100644
--- a/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
+++ b/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
@@ -22,7 +22,7 @@
 // Filled with default values.
 @property(readonly) CGFloat deltaX;
 @property(readonly) CGFloat deltaY;
-@property(readonly) NSEventModifierFlags modifierFlags;
+@property(readonly) NSUInteger modifierFlags;
 @property(readonly) NSTimeInterval timestamp;
 
 @end
diff --git a/content/browser/renderer_host/render_widget_host_view_aura.cc b/content/browser/renderer_host/render_widget_host_view_aura.cc
index 5bebf776d70dd1d326058a0402d1aaa5c02b6e39..83e83794b2d4a036946e5d7287d304851959737b 100644
--- a/content/browser/renderer_host/render_widget_host_view_aura.cc
+++ b/content/browser/renderer_host/render_widget_host_view_aura.cc
@@ -1686,8 +1686,23 @@ bool RenderWidgetHostViewAura::TransformPointToLocalCoordSpace(
       !delegated_frame_host_->TransformPointToLocalCoordSpace(
           point_in_pixels, original_surface, transformed_point))
     return false;
-  *transformed_point =
-      gfx::ConvertPointToDIP(device_scale_factor_, *transformed_point);
+
+  // MUON(bbondy): When the point hasn't changed, avoid the double floor
+  // convert from pixels to DIP, which can change the input point from a
+  // couple of pixels. This can cause problems for other parts in the code
+  // like SelectionController which does an exact point comparison.  The
+  // double conversion causes a problem in particular when the DPI is not a
+  // multiple of 100.
+  // For example at 175% DPI 21 * 1.75 = 36.75, floored gives 36.
+  // Then the second DIP convert: 36 / 1.75 = 20.57, floored gives 20.
+  // Same point but we lost a pixel in that case.
+  // See: https://github.com/brave/browser-laptop/issues/8472
+  if (point_in_pixels == *transformed_point) {
+    *transformed_point = point;
+  } else {
+    *transformed_point =
+        gfx::ConvertPointToDIP(device_scale_factor_, *transformed_point);
+  }
   return true;
 }
 
diff --git a/content/browser/renderer_host/render_widget_host_view_mac.mm b/content/browser/renderer_host/render_widget_host_view_mac.mm
index 5d9a7a01faedc2a80aade71e65ca16d102f9efda..6be3c4c1f11e8f32559c408e818513637e9327cc 100644
--- a/content/browser/renderer_host/render_widget_host_view_mac.mm
+++ b/content/browser/renderer_host/render_widget_host_view_mac.mm
@@ -139,6 +139,12 @@ RenderWidgetHostView* GetRenderWidgetHostViewToUse(
 
 }  // namespace
 
+#ifndef MUON_CHROMIUM_BUILD
+@interface NSWindow (AtomCustomMethods)
+- (BOOL)acceptsFirstMouse;
+- (BOOL)disableAutoHideCursor;
+@end
+#endif
 // These are not documented, so use only after checking -respondsToSelector:.
 @interface NSApplication (UndocumentedSpeechMethods)
 - (void)speakString:(NSString*)string;
@@ -1612,6 +1618,10 @@ void RenderWidgetHostViewMac::SetActive(bool active) {
   if (render_widget_host_) {
     render_widget_host_->SetActive(active);
     if (active) {
+      // RenderWidgetHostViewGuest doesn't send Show/Hide to the platform_view so
+      // make sure the browser compositor is activated for guest views
+      // when the host is initially hidden
+      browser_compositor_->SetRenderWidgetHostIsHidden(false);
       if (HasFocus())
         render_widget_host_->Focus();
     } else {
@@ -1875,7 +1885,14 @@ Class GetRenderWidgetHostViewCocoaClassForTesting() {
 }
 
 - (BOOL)acceptsFirstMouse:(NSEvent*)theEvent {
+#ifdef MUON_CHROMIUM_BUILD
   return [self acceptsMouseEventsWhenInactive];
+#else
+  if ([self.window respondsToSelector:@selector(acceptsFirstMouse)] &&
+      [self.window acceptsFirstMouse])
+    return YES;
+  return NO;
+#endif  // MUON_CHROMIUM_BUILD
 }
 
 - (void)setCloseOnDeactivate:(BOOL)b {
@@ -2108,8 +2125,10 @@ Class GetRenderWidgetHostViewCocoaClassForTesting() {
   if (EventIsReservedBySystem(theEvent))
     return;
 
+#ifdef MUON_CHROMIUM_BUILD
   DCHECK([theEvent type] != NSKeyDown ||
          !equiv == !([theEvent modifierFlags] & NSCommandKeyMask));
+#endif  // MUON_CHROMIUM_BUILD
 
   if ([theEvent type] == NSFlagsChanged) {
     // Ignore NSFlagsChanged events from the NumLock and Fn keys as
@@ -2981,6 +3000,11 @@ Class GetRenderWidgetHostViewCocoaClassForTesting() {
 // move) for the given event. Customize here to be more selective about which
 // key presses to autohide on.
 - (BOOL)shouldAutohideCursorForEvent:(NSEvent*)event {
+#ifndef MUON_CHROMIUM_BUILD
+  if ([event.window respondsToSelector:@selector(disableAutoHideCursor)] &&
+      [event.window disableAutoHideCursor])
+    return NO;
+#endif  // MUON_CHROMIUM_BUILD
   return (renderWidgetHostView_->GetTextInputType() !=
               ui::TEXT_INPUT_TYPE_NONE &&
           [event type] == NSKeyDown &&
diff --git a/content/browser/renderer_host/render_widget_targeter.cc b/content/browser/renderer_host/render_widget_targeter.cc
index 40549b7e067f24731733f69440be4da97c104084..c91e4939d0bd1f6fdd67a80ebf65d964db2499f0 100644
--- a/content/browser/renderer_host/render_widget_targeter.cc
+++ b/content/browser/renderer_host/render_widget_targeter.cc
@@ -5,6 +5,7 @@
 #include "content/browser/renderer_host/render_widget_targeter.h"
 
 #include "base/metrics/histogram_functions.h"
+#include "content/browser/renderer_host/cursor_manager.h"
 #include "content/browser/renderer_host/input/one_shot_timeout_monitor.h"
 #include "content/browser/renderer_host/render_widget_host_impl.h"
 #include "content/browser/renderer_host/render_widget_host_view_base.h"
@@ -140,7 +141,9 @@ void RenderWidgetTargeter::FindTargetAndDispatch(
   // TODO(kenrb, wjmaclean): Asynchronous hit tests don't work properly with
   // GuestViews, so rely on the synchronous result.
   // See https://crbug.com/802378.
-  if (result.should_query_view && !target->IsRenderWidgetHostViewGuest()) {
+  if (result.should_query_view &&
+      (!target->IsRenderWidgetHostViewGuest() ||
+       event.GetType() == blink::WebInputEvent::kMouseMove)) {
     // TODO(kenrb, sadrul): When all event types support asynchronous hit
     // testing, we should be able to have FindTargetSynchronously return the
     // view and location to use for the renderer hit test query.
@@ -152,6 +155,9 @@ void RenderWidgetTargeter::FindTargetAndDispatch(
   } else {
     FoundTarget(root_view, target, *event_ptr, latency, result.target_location);
   }
+  if (root_view->GetCursorManager() &&
+      event.GetType() == blink::WebInputEvent::kMouseMove)
+    root_view->GetCursorManager()->UpdateViewUnderCursor(target);
 }
 
 void RenderWidgetTargeter::ViewWillBeDestroyed(RenderWidgetHostViewBase* view) {
diff --git a/content/browser/storage_partition_impl_map.h b/content/browser/storage_partition_impl_map.h
index ce0951bacd4dab08db92f6a87087279fcc7e4f09..10c7976815635c945079344e63ecf7f9f9932eaf 100644
--- a/content/browser/storage_partition_impl_map.h
+++ b/content/browser/storage_partition_impl_map.h
@@ -22,6 +22,10 @@ class FilePath;
 class SequencedTaskRunner;
 }  // namespace base
 
+namespace brave {
+class BraveBrowserContext;
+} // namespace brave
+
 namespace content {
 
 class BrowserContext;
@@ -64,6 +68,8 @@ class CONTENT_EXPORT StoragePartitionImplMap
   FRIEND_TEST_ALL_PREFIXES(StoragePartitionConfigTest, OperatorLess);
   FRIEND_TEST_ALL_PREFIXES(StoragePartitionImplMapTest, GarbageCollect);
 
+  friend class brave::BraveBrowserContext;
+
   // Each StoragePartition is uniquely identified by which partition domain
   // it belongs to (such as an app or the browser itself), the user supplied
   // partition name and the bit indicating whether it should be persisted on
diff --git a/content/browser/web_contents/web_contents_impl.cc b/content/browser/web_contents/web_contents_impl.cc
index 829401d6438671f55a9caf3a8f5eb5dc38234332..8ea576f35c95b7a0dbe050788a8d6b302ba75550 100644
--- a/content/browser/web_contents/web_contents_impl.cc
+++ b/content/browser/web_contents/web_contents_impl.cc
@@ -1724,7 +1724,8 @@ void WebContentsImpl::Init(const WebContents::CreateParams& params) {
   // This is set before initializing the render manager since
   // RenderFrameHostManager::Init calls back into us via its delegate to ask if
   // it should be hidden.
-  should_normally_be_visible_ = !params.initially_hidden;
+  // should_normally_be_visible_ = !params.initially_hidden;
+  should_normally_be_visible_ = true;
 
   // The routing ids must either all be set or all be unset.
   DCHECK((params.routing_id == MSG_ROUTING_NONE &&
@@ -2270,7 +2271,8 @@ void WebContentsImpl::CreateNewWindow(
   DCHECK(!params.opener_suppressed || render_view_route_id == MSG_ROUTING_NONE);
 
   scoped_refptr<SiteInstance> site_instance =
-      params.opener_suppressed && !is_guest
+      // params.opener_suppressed && !is_guest
+      params.opener_suppressed
           ? SiteInstance::CreateForURL(GetBrowserContext(), params.target_url)
           : source_site_instance;
 
diff --git a/content/browser/web_contents/web_contents_view_mac.mm b/content/browser/web_contents/web_contents_view_mac.mm
index 2c5dd9e99e6da2886063b4d4ca86605ca5ff13d3..9bf9e8a762cf3ec28b6d05e6a151a86698d2b7fe 100644
--- a/content/browser/web_contents/web_contents_view_mac.mm
+++ b/content/browser/web_contents/web_contents_view_mac.mm
@@ -614,6 +614,7 @@ void WebContentsViewMac::CloseTab() {
              endedAt:(NSPoint)screenPoint
            operation:(NSDragOperation)operation {
   [dragSource_ endDragAt:screenPoint operation:operation];
+  [dragDest_ endDrag];
 
   // Might as well throw out this object now.
   dragSource_.reset();
diff --git a/content/browser/web_contents/web_drag_dest_mac.h b/content/browser/web_contents/web_drag_dest_mac.h
index c81c2a89ab8ea8c0018a6eecfdcf21219f1b0d8d..fa09b9cd19ddacf5b73d07560405fd06837b6920 100644
--- a/content/browser/web_contents/web_drag_dest_mac.h
+++ b/content/browser/web_contents/web_drag_dest_mac.h
@@ -95,6 +95,9 @@ GetRenderWidgetHostAtPoint:(const NSPoint&)viewPoint
 // Sets |dragStartProcessID_| and |dragStartViewID_|.
 - (void)setDragStartTrackersForProcess:(int)processID;
 
+// Ends a drag operation
+- (void)endDrag;
+
 // Returns whether |targetRWH| is a valid RenderWidgetHost to be dragging
 // over. This enforces that same-page, cross-site drags are not allowed. See
 // crbug.com/666858.
diff --git a/content/browser/web_contents/web_drag_dest_mac.mm b/content/browser/web_contents/web_drag_dest_mac.mm
index 35c4ee35242ac1e21beb94ae6b844dff14e04580..fdfc3b0ac56774fc5fd6a591ccad052c8cbec0cb 100644
--- a/content/browser/web_contents/web_drag_dest_mac.mm
+++ b/content/browser/web_contents/web_drag_dest_mac.mm
@@ -347,6 +347,12 @@ GetRenderWidgetHostAtPoint:(const NSPoint&)viewPoint
   dragStartViewID_ = GetRenderViewHostID(webContents_->GetRenderViewHost());
 }
 
+- (void)endDrag {
+  dragStartProcessID_ = content::ChildProcessHost::kInvalidUniqueID;
+  dragStartViewID_ = content::GlobalRoutingID(
+    content::ChildProcessHost::kInvalidUniqueID, MSG_ROUTING_NONE);
+}
+
 - (bool)isValidDragTarget:(content::RenderWidgetHostImpl*)targetRWH {
   return targetRWH->GetProcess()->GetID() == dragStartProcessID_ ||
          GetRenderViewHostID(webContents_->GetRenderViewHost()) !=
diff --git a/content/common/browser_plugin/browser_plugin_messages.h b/content/common/browser_plugin/browser_plugin_messages.h
index 6d19348f95bc734fbf4becae13c8b31efc215d94..dde0524f7aaf1675d1fef4556c48c8786b946680 100644
--- a/content/common/browser_plugin/browser_plugin_messages.h
+++ b/content/common/browser_plugin/browser_plugin_messages.h
@@ -174,6 +174,14 @@ IPC_MESSAGE_ROUTED3(BrowserPluginHostMsg_RequireSequence,
 // -----------------------------------------------------------------------------
 // These messages are from the browser process to the embedder.
 
+// Indicates that an attach request has completed. The provided
+// |child_local_surface_id| is used as the seed for the
+// ParentLocalSurfaceIdAllocator.
+IPC_MESSAGE_CONTROL2(
+    BrowserPluginMsg_Attach_ACK,
+    int /* browser_plugin_instance_id */,
+    base::Optional<viz::LocalSurfaceId> /* child_local_surface_id */)
+
 // When the guest crashes, the browser process informs the embedder through this
 // message.
 IPC_MESSAGE_CONTROL1(BrowserPluginMsg_GuestGone,
diff --git a/content/common/content_switches_internal.cc b/content/common/content_switches_internal.cc
index f4b0773a6f13456f1789abb0e6f614aee9fd4a41..304e731d8c05d8258e32288afce21c518a580d89 100644
--- a/content/common/content_switches_internal.cc
+++ b/content/common/content_switches_internal.cc
@@ -156,7 +156,7 @@ void WaitForDebugger(const std::string& label) {
 #if defined(GOOGLE_CHROME_BUILD)
   std::string title = "Google Chrome";
 #else   // CHROMIUM_BUILD
-  std::string title = "Chromium";
+  std::string title = "Brave";
 #endif  // CHROMIUM_BUILD
   title += " ";
   title += label;  // makes attaching to process easier
diff --git a/content/common/dom_storage/dom_storage_map.cc b/content/common/dom_storage/dom_storage_map.cc
index 0a6b0176a982782fd1472f607f811dd6c183c3fe..052ca73677cad3b10b494bf2ab823a046dd0b080 100644
--- a/content/common/dom_storage/dom_storage_map.cc
+++ b/content/common/dom_storage/dom_storage_map.cc
@@ -184,8 +184,8 @@ bool DOMStorageMap::SetItemInternal(MapType* map_type,
 
   // Only check quota if the size is increasing, this allows
   // shrinking changes to pre-existing files that are over budget.
-  if (new_item_size > old_item_size && new_storage_used > quota_)
-    return false;
+  // if (new_item_size > old_item_size && new_storage_used > quota_)
+  //   return false;
 
   (*map_type)[key] = value;
   ResetKeyIterator();
diff --git a/content/public/app/mojo/content_renderer_manifest.json b/content/public/app/mojo/content_renderer_manifest.json
index a0e53cf8b199fba071a83c0c45283696bf8c224d..ffeafa9d9bb22c51b862fc62ac5fc3a29280402d 100644
--- a/content/public/app/mojo/content_renderer_manifest.json
+++ b/content/public/app/mojo/content_renderer_manifest.json
@@ -47,6 +47,7 @@
     "navigation:frame": {
       "provides": {
         "browser": [
+          "autofill::mojom::AutofillAgent",
           "blink::mojom::AppBannerController",
           "blink::mojom::EngagementClient",
           "blink::mojom::InstallationService",
diff --git a/content/public/common/web_preferences.cc b/content/public/common/web_preferences.cc
index dea1648536460774761801f9bdd87dc2e699ef61..b8ca82e411dc16251ed83ee203f73ee8c9b1adb0 100644
--- a/content/public/common/web_preferences.cc
+++ b/content/public/common/web_preferences.cc
@@ -232,7 +232,7 @@ WebPreferences::WebPreferences()
       presentation_receiver(false),
       media_controls_enabled(true),
       do_not_update_selection_on_mutating_selection_range(false),
-#if defined(OS_ANDROID)
+#if defined(OS_ANDROID) || !defined(MUON_CHROMIUM_BUILD)
       autoplay_policy(AutoplayPolicy::kUserGestureRequired),
 #else
       autoplay_policy(AutoplayPolicy::kNoUserGestureRequired),
diff --git a/content/renderer/browser_plugin/browser_plugin.cc b/content/renderer/browser_plugin/browser_plugin.cc
index 19e2c163a59affb17a8bda65c951f909143c5219..1b6779970737d40689604d77cd1aa5c07f098475 100644
--- a/content/renderer/browser_plugin/browser_plugin.cc
+++ b/content/renderer/browser_plugin/browser_plugin.cc
@@ -121,6 +121,7 @@ bool BrowserPlugin::OnMessageReceived(const IPC::Message& message) {
   bool handled = true;
   IPC_BEGIN_MESSAGE_MAP(BrowserPlugin, message)
     IPC_MESSAGE_HANDLER(BrowserPluginMsg_AdvanceFocus, OnAdvanceFocus)
+    IPC_MESSAGE_HANDLER(BrowserPluginMsg_Attach_ACK, OnAttachACK)
     IPC_MESSAGE_HANDLER(BrowserPluginMsg_GuestGone, OnGuestGone)
     IPC_MESSAGE_HANDLER(BrowserPluginMsg_GuestReady, OnGuestReady)
     IPC_MESSAGE_HANDLER(BrowserPluginMsg_ResizeDueToAutoResize,
@@ -200,8 +201,6 @@ void BrowserPlugin::Attach() {
       browser_plugin_instance_id_,
       attach_params));
 
-  attached_ = true;
-
   // Post an update event to the associated accessibility object.
   auto* render_frame =
       RenderFrameImpl::FromRoutingID(render_frame_routing_id());
@@ -216,7 +215,6 @@ void BrowserPlugin::Attach() {
   }
 
   sent_resize_params_ = base::nullopt;
-  WasResized();
 }
 
 void BrowserPlugin::Detach() {
@@ -231,6 +229,10 @@ void BrowserPlugin::Detach() {
       new BrowserPluginHostMsg_Detach(browser_plugin_instance_id_));
 }
 
+const viz::LocalSurfaceId& BrowserPlugin::GetLocalSurfaceId() const {
+  return parent_local_surface_id_allocator_.last_known_local_surface_id();
+}
+
 #if defined(USE_AURA)
 void BrowserPlugin::CreateMusWindowAndEmbed(
     const base::UnguessableToken& embed_token) {
@@ -246,8 +248,8 @@ void BrowserPlugin::CreateMusWindowAndEmbed(
   DCHECK(renderer_window_tree_client);
   mus_embedded_frame_ =
       renderer_window_tree_client->CreateMusEmbeddedFrame(this, embed_token);
-  if (attached() && local_surface_id_.is_valid()) {
-    mus_embedded_frame_->SetWindowBounds(local_surface_id_,
+  if (attached() && GetLocalSurfaceId().is_valid()) {
+    mus_embedded_frame_->SetWindowBounds(GetLocalSurfaceId(),
                                          FrameRectInPixels());
   }
 }
@@ -265,11 +267,12 @@ void BrowserPlugin::WasResized() {
       sent_resize_params_->screen_info != pending_resize_params_.screen_info;
 
   if (synchronized_params_changed)
-    local_surface_id_ = parent_local_surface_id_allocator_.GenerateId();
+    parent_local_surface_id_allocator_.GenerateId();
 
   if (enable_surface_synchronization_ && frame_sink_id_.is_valid()) {
     compositing_helper_->SetPrimarySurfaceId(
-        viz::SurfaceId(frame_sink_id_, local_surface_id_), frame_rect().size());
+        viz::SurfaceId(frame_sink_id_, GetLocalSurfaceId()),
+        frame_rect().size());
   }
 
   bool position_changed =
@@ -282,7 +285,7 @@ void BrowserPlugin::WasResized() {
     BrowserPluginManager::Get()->Send(
         new BrowserPluginHostMsg_UpdateResizeParams(
             browser_plugin_instance_id_, frame_rect(), screen_info(),
-            auto_size_sequence_number(), local_surface_id_));
+            auto_size_sequence_number(), GetLocalSurfaceId()));
   }
 
   if (delegate_ && size_changed)
@@ -293,7 +296,7 @@ void BrowserPlugin::WasResized() {
 
 #if defined(USE_AURA)
   if (IsRunningWithMus() && mus_embedded_frame_) {
-    mus_embedded_frame_->SetWindowBounds(local_surface_id_,
+    mus_embedded_frame_->SetWindowBounds(GetLocalSurfaceId(),
                                          FrameRectInPixels());
   }
 #endif
@@ -309,6 +312,15 @@ void BrowserPlugin::OnAdvanceFocus(int browser_plugin_instance_id,
   render_view->GetWebView()->AdvanceFocus(reverse);
 }
 
+void BrowserPlugin::OnAttachACK(
+    int browser_plugin_instance_id,
+    const base::Optional<viz::LocalSurfaceId>& child_local_surface_id) {
+  attached_ = true;
+  if (child_local_surface_id)
+    parent_local_surface_id_allocator_.Reset(*child_local_surface_id);
+  WasResized();
+}
+
 void BrowserPlugin::OnGuestGone(int browser_plugin_instance_id) {
   guest_crashed_ = true;
   compositing_helper_->ChildFrameGone();
@@ -582,8 +594,6 @@ blink::WebInputEventResult BrowserPlugin::HandleInputEvent(
 
   if (blink::WebInputEvent::IsGestureEventType(event.GetType())) {
     auto gesture_event = static_cast<const blink::WebGestureEvent&>(event);
-    DCHECK(blink::WebInputEvent::kGestureTapDown == event.GetType() ||
-           gesture_event.resending_plugin_id == browser_plugin_instance_id_);
 
     // We shouldn't be forwarding GestureEvents to the Guest anymore. Indicate
     // we handled this only if it's a non-resent event.
diff --git a/content/renderer/browser_plugin/browser_plugin.h b/content/renderer/browser_plugin/browser_plugin.h
index 7480991fb448ba16fa26a6e57785e9ba4d817c9a..ae28e24fb227ee13b6b149c896ae8b24832e0df5 100644
--- a/content/renderer/browser_plugin/browser_plugin.h
+++ b/content/renderer/browser_plugin/browser_plugin.h
@@ -88,6 +88,9 @@ class CONTENT_EXPORT BrowserPlugin : public blink::WebPlugin,
   // currently attached to, if any.
   void Detach();
 
+  // Returns the last allocated LocalSurfaceId.
+  const viz::LocalSurfaceId& GetLocalSurfaceId() const;
+
   void WasResized();
 
   // Returns whether a message should be forwarded to BrowserPlugin.
@@ -185,6 +188,9 @@ class CONTENT_EXPORT BrowserPlugin : public blink::WebPlugin,
   // IPC message handlers.
   // Please keep in alphabetical order.
   void OnAdvanceFocus(int instance_id, bool reverse);
+  void OnAttachACK(
+      int browser_plugin_instance_id,
+      const base::Optional<viz::LocalSurfaceId>& child_local_surface_id);
   void OnGuestGone(int instance_id);
   void OnGuestReady(int instance_id, const viz::FrameSinkId& frame_sink_id);
   void OnResizeDueToAutoResize(int browser_plugin_instance_id,
@@ -242,7 +248,6 @@ class CONTENT_EXPORT BrowserPlugin : public blink::WebPlugin,
   std::vector<EditCommand> edit_commands_;
 
   viz::FrameSinkId frame_sink_id_;
-  viz::LocalSurfaceId local_surface_id_;
   viz::ParentLocalSurfaceIdAllocator parent_local_surface_id_allocator_;
 
   bool enable_surface_synchronization_ = false;
diff --git a/device/geolocation/BUILD.gn b/device/geolocation/BUILD.gn
index 65dfbb8360c2127bd2ccdb3732a01d2e4acc6575..9789296cf5c1f133433941a27ee1dfcbd01210a9 100644
--- a/device/geolocation/BUILD.gn
+++ b/device/geolocation/BUILD.gn
@@ -11,6 +11,7 @@ if (is_android) {
 
 component("geolocation") {
   defines = [ "DEVICE_GEOLOCATION_IMPLEMENTATION" ]
+  configs += [ "//electron/build/geolocation" ]
 
   sources = [
     "empty_wifi_data_provider.cc",
diff --git a/device/geolocation/network_location_request.cc b/device/geolocation/network_location_request.cc
index a9a739e4f9a707faaf195f0747b560197b97a1be..2c34b71205886e239151ba56e5c8f7f878c9d611 100644
--- a/device/geolocation/network_location_request.cc
+++ b/device/geolocation/network_location_request.cc
@@ -32,8 +32,12 @@
 namespace device {
 namespace {
 
+#if defined(GOOGLEAPIS_ENDPOINT)
+const char kNetworkLocationBaseUrl[] = GOOGLEAPIS_ENDPOINT;
+#else
 const char kNetworkLocationBaseUrl[] =
     "https://www.googleapis.com/geolocation/v1/geolocate";
+#endif
 
 const char kLocationString[] = "location";
 const char kLatitudeString[] = "lat";
diff --git a/extensions/browser/api/messaging/message_service.cc b/extensions/browser/api/messaging/message_service.cc
index 596684b290c090c74fc142c8f1d53ec161b633a3..6064b6d3c8ace9f576e8b7dd2f8b304f2ca888ac 100644
--- a/extensions/browser/api/messaging/message_service.cc
+++ b/extensions/browser/api/messaging/message_service.cc
@@ -124,6 +124,11 @@ namespace {
 static content::RenderProcessHost* GetExtensionProcess(
     BrowserContext* context,
     const std::string& extension_id) {
+  auto original = ExtensionsBrowserClient::Get()->GetOriginalContext(context);
+  // Always use the original context for non-private child contexts
+  if (!context->IsOffTheRecord()) {
+    context = original;
+  }
   scoped_refptr<SiteInstance> site_instance =
       ProcessManager::Get(context)->GetSiteInstanceForURL(
           Extension::GetBaseURLFromExtensionId(extension_id));
diff --git a/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc b/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc
index 1661c0c65821de8e8e8ac5dbabaa582590c8f0cb..93340b7ce3db2718f64c983a2f68827167f07ede 100644
--- a/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc
+++ b/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc
@@ -56,8 +56,10 @@ void ExtensionsGuestViewManagerDelegate::DispatchEvent(
   // extensions::events::HistogramValue as an argument.
   events::HistogramValue histogram_value =
       guest_view_events::GetEventHistogramValue(event_name);
+#ifdef MUON_CHROMIUM_BUILD
   DCHECK_NE(events::UNKNOWN, histogram_value) << "Event " << event_name
                                               << " must have a histogram value";
+#endif
 
   content::WebContents* owner = guest->owner_web_contents();
   if (!owner)
diff --git a/extensions/browser/guest_view/web_view/web_view_guest.cc b/extensions/browser/guest_view/web_view/web_view_guest.cc
index f159279d8d8834a16c12a1d48e8067de3b364c98..644a788c267be6aeeb0609fbba729250468998b6 100644
--- a/extensions/browser/guest_view/web_view/web_view_guest.cc
+++ b/extensions/browser/guest_view/web_view/web_view_guest.cc
@@ -308,7 +308,7 @@ std::string WebViewGuest::GetPartitionID(
 }
 
 // static
-const char WebViewGuest::Type[] = "webview";
+const char WebViewGuest::Type[] = "chrome-webview";
 
 // static
 int WebViewGuest::GetOrGenerateRulesRegistryID(
diff --git a/extensions/common/BUILD.gn b/extensions/common/BUILD.gn
index 616fcbe0d432754418085a2c1e80db89e138c6ab..1cda479a5b2ab8ba2f33f07252ed3bc25914fc5c 100644
--- a/extensions/common/BUILD.gn
+++ b/extensions/common/BUILD.gn
@@ -295,6 +295,7 @@ if (enable_extensions) {
       "//components/crx_file",
       "//components/nacl/common:features",
       "//components/url_matcher",
+      "//content/public/common",
       "//crypto",
       "//device/bluetooth",
       "//device/usb",
diff --git a/extensions/common/api/_api_features.json b/extensions/common/api/_api_features.json
index 24ba9fd2be824110b84ac82700989c2e86b48ffb..0f11dbc0e84c2d63f839fc086feab3e11ab4372b 100644
--- a/extensions/common/api/_api_features.json
+++ b/extensions/common/api/_api_features.json
@@ -189,7 +189,10 @@
     {
       "internal": true,
       "channel": "stable",
-      "contexts": ["blessed_extension"]
+      "contexts": ["blessed_extension", "webui"],
+      "matches": [
+        "chrome://brave/*"
+      ]
     }, {
       "internal": true,
       "channel": "stable",
@@ -555,6 +558,7 @@
     "internal": true,
     "contexts": ["webui"],
     "matches": [
+      "chrome://brave/*",
       "chrome://chrome-signin/*",
       "chrome://media-router/*",
       "chrome://mobilesetup/*",
@@ -575,6 +579,13 @@
       "chrome://mobilesetup/*",
       "chrome://oobe/*"
     ]
+  }, {
+    "internal": true,
+    "channel": "stable",
+    "contexts": ["webui"],
+    "matches": [
+      "chrome://brave/*"
+    ]
   }],
   "webViewRequest": [{
     "dependencies": ["permission:webview"],
@@ -583,6 +594,7 @@
     "channel": "stable",
     "contexts": ["webui"],
     "matches": [
+      "chrome://brave/*",
       "chrome://chrome-signin/*",
       "chrome://media-router/*",
       "chrome://mobilesetup/*",
diff --git a/extensions/renderer/module_system.cc b/extensions/renderer/module_system.cc
index 25c4a7d5ddd46f830084bdb755479bfe1a44a265..669a68d93c425fc541a6a43f1df927990a87f77f 100644
--- a/extensions/renderer/module_system.cc
+++ b/extensions/renderer/module_system.cc
@@ -409,11 +409,13 @@ void ModuleSystem::LazyFieldGetterInner(
   // time, it means something went wrong. Bail out early rather than going
   // through the initialization process again (since bindings may not expect to
   // run multiple times).
+#ifdef MUON_CHROMIUM_BUILD
+  // broken commit in upstream see https://codereview.chromium.org/2835643004#msg23
   if (!module_system->loaded_modules_.insert(name).second) {
     Warn(isolate, "Previous API instantiation failed.");
     return;
   }
-
+#endif
   // Switch to our v8 context because we need functions created while running
   // the require()d module to belong to our context, not the current one.
   v8::Context::Scope context_scope(context);
diff --git a/extensions/renderer/resources/guest_view/guest_view_container.js b/extensions/renderer/resources/guest_view/guest_view_container.js
index 2ef77f4f6359618be7b37d0804a77dd4883dbc06..47f9059b1819810fc4284a9d63aae1d8c658431f 100644
--- a/extensions/renderer/resources/guest_view/guest_view_container.js
+++ b/extensions/renderer/resources/guest_view/guest_view_container.js
@@ -26,6 +26,7 @@ function GuestViewContainer(element, viewType) {
   privates(this).internalElement = this.createInternalElement$();
   this.setupFocusPropagation();
   var shadowRoot = this.element.createShadowRoot();
+  shadowRoot.innerHTML = '<style>:host { display: flex; }</style>'
   shadowRoot.appendChild(privates(this).internalElement);
 
   GuestViewInternalNatives.RegisterView(this.viewInstanceId, this, viewType);
@@ -209,8 +210,9 @@ function registerInternalElement(viewType) {
   proto.createdCallback = function() {
     this.setAttribute('type', 'application/browser-plugin');
     this.setAttribute('id', 'browser-plugin-' + IdGenerator.GetNextId());
-    this.style.width = '100%';
-    this.style.height = '100%';
+    // this.style.width = '100%';
+    // this.style.height = '100%';
+    this.style.flex = '1 1 auto';
   };
 
   proto.attachedCallback = function() {
diff --git a/media/base/media_switches.cc b/media/base/media_switches.cc
index b7fb84846acdd37de8593a1180dfaedd2fbc431c..3b4be3019ec0dd2fa0ed636bc6a56ea2867af948 100644
--- a/media/base/media_switches.cc
+++ b/media/base/media_switches.cc
@@ -350,7 +350,7 @@ std::string GetEffectiveAutoplayPolicy(const base::CommandLine& command_line) {
     return switches::autoplay::kDocumentUserActivationRequiredPolicy;
 
 // The default value is platform dependent.
-#if defined(OS_ANDROID)
+#if defined(OS_ANDROID) || !defined(MUON_CHROMIUM_BUILD)
   return switches::autoplay::kUserGestureRequiredPolicy;
 #else
   return switches::autoplay::kNoUserGestureRequiredPolicy;
diff --git a/net/http/BUILD.gn b/net/http/BUILD.gn
index d00da41da1d8bbc40d8a85d582c1966ed22eaaf1..6a3b54e91eafb8f187989c9c954be0008343aa63 100644
--- a/net/http/BUILD.gn
+++ b/net/http/BUILD.gn
@@ -10,7 +10,7 @@ compiled_action("generate_transport_security_state") {
 
   # Inputs in order expected by the command line of the tool.
   inputs = [
-    "transport_security_state_static.json",
+    "//electron/atom/browser/resources/transport_security_state_static.json",
     "transport_security_state_static.pins",
     "transport_security_state_static.template",
   ]
diff --git a/net/http/http_util.cc b/net/http/http_util.cc
index 9361272ce0d539dd4bfa1b66b07cb416fe867b14..2df550bc5c628f9029f44328922dac267bbc17b1 100644
--- a/net/http/http_util.cc
+++ b/net/http/http_util.cc
@@ -57,8 +57,8 @@ size_t FindStringEnd(const std::string& line, size_t start, char delim) {
 // static
 std::string HttpUtil::SpecForRequest(const GURL& url) {
   // We may get ftp scheme when fetching ftp resources through proxy.
-  DCHECK(url.is_valid() && (url.SchemeIsHTTPOrHTTPS() || url.SchemeIs("ftp") ||
-                            url.SchemeIsWSOrWSS()));
+  // DCHECK(url.is_valid() && (url.SchemeIsHTTPOrHTTPS() || url.SchemeIs("ftp") ||
+  //                           url.SchemeIsWSOrWSS()));
   return SimplifyUrlForRequest(url).spec();
 }
 
diff --git a/net/http/transport_security_state.cc b/net/http/transport_security_state.cc
index 6eaa321ef4b8d5d743cab4448ed695ac1a02fabf..19020dbe84515b22d061a2bb8088159267c2faac 100644
--- a/net/http/transport_security_state.cc
+++ b/net/http/transport_security_state.cc
@@ -761,6 +761,10 @@ TransportSecurityState::TransportSecurityState()
   enable_static_pins_ = false;
   enable_static_expect_ct_ = false;
 #endif
+
+#if !defined(MUON_CHROMIUM_BUILD)
+  enable_static_pins_ = true;
+#endif
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
 }
 
diff --git a/net/proxy/proxy_service.cc b/net/proxy/proxy_service.cc
index 369a1ca0c222526b3daf5250d221e43c37c2e2a3..ff58dc77128ece681a757bebb91f424f82ee14c0 100644
--- a/net/proxy/proxy_service.cc
+++ b/net/proxy/proxy_service.cc
@@ -1476,7 +1476,7 @@ void ProxyService::ResetConfigService(
 
 void ProxyService::ForceReloadProxyConfig() {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  ResetProxyConfig(false);
+  ResetProxyConfig(true);
   ApplyProxyConfigIfAvailable();
 }
 
diff --git a/net/url_request/url_request_job.h b/net/url_request/url_request_job.h
index 389315a25d7da30d71b59e3803ab795bc4c18e1c..79797fe7e674f9f6d2a65de542f262a945454f16 100644
--- a/net/url_request/url_request_job.h
+++ b/net/url_request/url_request_job.h
@@ -285,6 +285,7 @@ class NET_EXPORT URLRequestJob : public base::PowerObserver {
   void OnCallToDelegate();
   void OnCallToDelegateComplete();
 
+public:
   // Called to read raw (pre-filtered) data from this Job. Reads at most
   // |buf_size| bytes into |buf|.
   // Possible return values:
diff --git a/third_party/WebKit/Source/core/editing/EditingBehavior.h b/third_party/WebKit/Source/core/editing/EditingBehavior.h
index 023555bcd3b56fd12c3319096deff07fa9854388..5b75bfaa858cead732a701029f45f5492a19549e 100644
--- a/third_party/WebKit/Source/core/editing/EditingBehavior.h
+++ b/third_party/WebKit/Source/core/editing/EditingBehavior.h
@@ -42,7 +42,7 @@ class CORE_EXPORT EditingBehavior {
   // area, maintain the horizontal position on Windows and Android but extend it
   // to the boundary of the editable content on Mac and Linux.
   bool ShouldMoveCaretToHorizontalBoundaryWhenPastTopOrBottom() const {
-    return type_ != kEditingWindowsBehavior && type_ != kEditingAndroidBehavior;
+    return false;
   }
 
   bool ShouldSelectReplacement() const {
diff --git a/third_party/WebKit/Source/core/exported/WebViewImpl.cpp b/third_party/WebKit/Source/core/exported/WebViewImpl.cpp
index 8ab197693ed861ee46b954297d05c5e2edb2c4a8..cfb1728bceb69a94be687de2fb38a6297aa90491 100644
--- a/third_party/WebKit/Source/core/exported/WebViewImpl.cpp
+++ b/third_party/WebKit/Source/core/exported/WebViewImpl.cpp
@@ -3259,6 +3259,7 @@ void WebViewImpl::DidCloseContextMenu() {
   LocalFrame* frame = page_->GetFocusController().FocusedFrame();
   if (frame)
     frame->Selection().SetCaretBlinkingSuspended(false);
+  page_->GetContextMenuController().ClearContextMenu();
 }
 
 void WebViewImpl::HidePopups() {
diff --git a/third_party/WebKit/Source/core/html/media/AutoplayPolicy.cpp b/third_party/WebKit/Source/core/html/media/AutoplayPolicy.cpp
index 0efc999d51329ba2f43a7887ff96bc99efaae6f2..965200042529cf4f61dbf2bbcd6b081250efc417 100644
--- a/third_party/WebKit/Source/core/html/media/AutoplayPolicy.cpp
+++ b/third_party/WebKit/Source/core/html/media/AutoplayPolicy.cpp
@@ -300,6 +300,12 @@ bool AutoplayPolicy::IsGestureNeededForPlaybackIfPendingUserGestureIsLocked()
   if (element_->GetLoadType() == WebMediaPlayer::kLoadTypeMediaStream)
     return false;
 
+  // MUON(darkdh): default allow local files
+  if (element_->GetDocument().origin() == String("null"))
+    return false;
+
+  // MUON(darkdh): prompt autoply permission even for muted video
+#if defined(MUON_CHROMIUM_BUILD)
   // We want to allow muted video to autoplay if:
   // - the flag is enabled;
   // - Data Saver is not enabled;
@@ -316,6 +322,12 @@ bool AutoplayPolicy::IsGestureNeededForPlaybackIfPendingUserGestureIsLocked()
       IsAutoplayAllowedPerSettings()) {
     return false;
   }
+#endif
+
+  // MUON(darkdh): prompt for autoplay permission
+  if ((element_->IsHTMLVideoElement() || element_->IsAudioElement()) &&
+      IsAutoplayAllowedPerSettings())
+    return false;
 
   return true;
 }
diff --git a/third_party/WebKit/Source/platform/bindings/V8PerIsolateData.cpp b/third_party/WebKit/Source/platform/bindings/V8PerIsolateData.cpp
index 8c62f1f4a06b96bcd37bb370dbc649c72bc8157f..7ddda69d1e7e974896170d73e0af02e4d241347e 100644
--- a/third_party/WebKit/Source/platform/bindings/V8PerIsolateData.cpp
+++ b/third_party/WebKit/Source/platform/bindings/V8PerIsolateData.cpp
@@ -50,7 +50,8 @@ v8::Isolate* MainThreadIsolate() {
 static V8PerIsolateData* g_main_thread_per_isolate_data = nullptr;
 
 static void BeforeCallEnteredCallback(v8::Isolate* isolate) {
-  CHECK(!ScriptForbiddenScope::IsScriptForbidden());
+  // TODO(jochen): Re-enable this once https://crbug.com/728583
+  // CHECK(!ScriptForbiddenScope::IsScriptForbidden());
 }
 
 static void MicrotasksCompletedCallback(v8::Isolate* isolate) {
diff --git a/third_party/boringssl/BUILD.generated.gni b/third_party/boringssl/BUILD.generated.gni
index f59afac5c3038d793f097bb7f8902734e11a600c..12fba44e3eca61675e861c118576a77ea68d9490 100644
--- a/third_party/boringssl/BUILD.generated.gni
+++ b/third_party/boringssl/BUILD.generated.gni
@@ -373,6 +373,24 @@ ssl_sources = [
   "src/ssl/tls_record.cc",
 ]
 
+decrepit_sources = [
+  "src/decrepit/bio/base64_bio.c",
+  "src/decrepit/blowfish/blowfish.c",
+  "src/decrepit/cast/cast.c",
+  "src/decrepit/cast/cast_tables.c",
+  "src/decrepit/des/cfb64ede.c",
+  "src/decrepit/dh/dh_decrepit.c",
+  "src/decrepit/dsa/dsa_decrepit.c",
+  "src/decrepit/evp/dss1.c",
+  "src/decrepit/evp/evp_do_all.c",
+  "src/decrepit/rc4/rc4_decrepit.c",
+  "src/decrepit/ripemd/ripemd.c",
+  "src/decrepit/rsa/rsa_decrepit.c",
+  "src/decrepit/ssl/ssl_decrepit.c",
+  "src/decrepit/x509/x509_decrepit.c",
+  "src/decrepit/xts/xts.c",
+]
+
 crypto_sources_ios_aarch64 = [
   "ios-aarch64/crypto/chacha/chacha-armv8.S",
   "ios-aarch64/crypto/fipsmodule/aesv8-armx64.S",
diff --git a/third_party/boringssl/BUILD.gn b/third_party/boringssl/BUILD.gn
index 86db99a4d85d353fac5d85b806dcff3369070dc3..95d6da41102e1579be58f01273b3075aa9a713a3 100644
--- a/third_party/boringssl/BUILD.gn
+++ b/third_party/boringssl/BUILD.gn
@@ -44,7 +44,7 @@ config("no_asm_config") {
   defines = [ "OPENSSL_NO_ASM" ]
 }
 
-all_sources = crypto_sources + ssl_sources
+all_sources = crypto_sources + ssl_sources + decrepit_sources
 
 # Windows' assembly is built with Yasm. The other platforms use the platform
 # assembler.
diff --git a/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc b/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc
index 7505524b693b24d9028447929d881232a0483561..03eea7522154c40691405ec43e07303b3e80e277 100644
--- a/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc
+++ b/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc
@@ -207,7 +207,11 @@ void CrashReportUploadThread::ProcessPendingReport(
         // If the most recent upload attempt occurred within the past hour,
         // don’t attempt to upload the new report. If it happened longer ago,
         // attempt to upload the report.
+#if defined(MUON_CHROMIUM_BUILD)
         constexpr int kUploadAttemptIntervalSeconds = 60 * 60;  // 1 hour
+#else
+        constexpr int kUploadAttemptIntervalSeconds = 1 * 60;  // 1 min
+#endif
         if (now - last_upload_attempt_time < kUploadAttemptIntervalSeconds) {
           database_->SkipReportUpload(
               report.uuid, Metrics::CrashSkippedReason::kUploadThrottled);
diff --git a/third_party/widevine/cdm/stub/manifest.json b/third_party/widevine/cdm/stub/manifest.json
index d466ccd1e02ed8c158fda545fe2175c135018da5..16ae2a357b21de66b1558939f9333b3c22e9cff2 100644
--- a/third_party/widevine/cdm/stub/manifest.json
+++ b/third_party/widevine/cdm/stub/manifest.json
@@ -24,6 +24,11 @@
       "os": "mac",
       "arch": "x64",
       "sub_package_path": "_platform_specific/mac_x64/"
+    },
+    {
+      "os": "linux",
+      "arch": "x64",
+      "sub_package_path": "_platform_specific/linux_x64/"
     }
   ]
 }
diff --git a/ui/views/controls/menu/menu_controller.cc b/ui/views/controls/menu/menu_controller.cc
index 9389f25f034d131f9aab4bd521db7999c12c5a5c..382d93ef0f641bdf80ca6ce84d1438670350fe12 100644
--- a/ui/views/controls/menu/menu_controller.cc
+++ b/ui/views/controls/menu/menu_controller.cc
@@ -614,6 +614,7 @@ bool MenuController::OnMouseDragged(SubmenuView* source,
     return true;
   }
   MenuItemView* mouse_menu = NULL;
+  base::WeakPtr<MenuController> this_ref = AsWeakPtr();
   if (part.type == MenuPart::MENU_ITEM) {
     // If there is no menu target, but a submenu target, then we are interacting
     // with an empty menu item within a submenu. These cannot become selection
@@ -638,7 +639,10 @@ bool MenuController::OnMouseDragged(SubmenuView* source,
       }
     }
   }
-  UpdateActiveMouseView(source, event, mouse_menu);
+  // The above code may have deleted us, so MenuController may have
+  // been destroyed.
+  if (this_ref)
+    UpdateActiveMouseView(source, event, mouse_menu);
 
   return true;
 }
diff --git a/components/viz/common/surfaces/child_local_surface_id_allocator.cc b/components/viz/common/surfaces/child_local_surface_id_allocator.cc
new file mode 100644
index 0000000000000000000000000000000000000000..f8c1d90482a405b82a042c83827fcc011b830f63
--- /dev/null
+++ b/components/viz/common/surfaces/child_local_surface_id_allocator.cc
@@ -0,0 +1,42 @@
+// Copyright 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "components/viz/common/surfaces/child_local_surface_id_allocator.h"
+
+#include <stdint.h>
+
+#include "base/rand_util.h"
+
+namespace viz {
+
+const LocalSurfaceId& ChildLocalSurfaceIdAllocator::UpdateFromParent(
+    const LocalSurfaceId& parent_allocated_local_surface_id) {
+  DCHECK_GE(parent_allocated_local_surface_id.parent_sequence_number(),
+            last_known_local_surface_id_.parent_sequence_number());
+  // Thie verifies that we only update the nonce if the parent sequence number
+  // has changed.
+  DCHECK(parent_allocated_local_surface_id.parent_sequence_number() >
+             last_known_local_surface_id_.parent_sequence_number() ||
+         parent_allocated_local_surface_id.nonce() ==
+             last_known_local_surface_id_.nonce());
+
+  last_known_local_surface_id_ =
+      LocalSurfaceId(parent_allocated_local_surface_id.parent_sequence_number(),
+                     last_known_local_surface_id_.child_sequence_number(),
+                     parent_allocated_local_surface_id.nonce());
+  return last_known_local_surface_id_;
+}
+
+const LocalSurfaceId& ChildLocalSurfaceIdAllocator::GenerateId() {
+  // UpdateFromParent must be called before we can generate a valid ID.
+  DCHECK_NE(last_known_local_surface_id_.parent_sequence_number(), 0u);
+
+  last_known_local_surface_id_ =
+      LocalSurfaceId(last_known_local_surface_id_.parent_sequence_number(),
+                     last_known_local_surface_id_.child_sequence_number() + 1,
+                     last_known_local_surface_id_.nonce());
+  return last_known_local_surface_id_;
+}
+
+}  // namespace viz
diff --git a/components/viz/common/surfaces/child_local_surface_id_allocator.h b/components/viz/common/surfaces/child_local_surface_id_allocator.h
new file mode 100644
index 0000000000000000000000000000000000000000..7bb3c01452d3b28d33be9ca26b65418a46fd58a5
--- /dev/null
+++ b/components/viz/common/surfaces/child_local_surface_id_allocator.h
@@ -0,0 +1,51 @@
+// Copyright 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef COMPONENTS_VIZ_COMMON_SURFACES_CHILD_LOCAL_SURFACE_ID_ALLOCATOR_H_
+#define COMPONENTS_VIZ_COMMON_SURFACES_CHILD_LOCAL_SURFACE_ID_ALLOCATOR_H_
+
+#include <stdint.h>
+
+#include "base/macros.h"
+#include "base/unguessable_token.h"
+#include "components/viz/common/surfaces/surface_id.h"
+#include "components/viz/common/viz_common_export.h"
+
+namespace viz {
+
+// This is a helper class for generating local surface IDs for a single
+// FrameSink. This is not threadsafe, to use from multiple threads wrap this
+// class in a mutex.
+// The parent embeds a child's surface. The child allocates a surface when it
+// changes its contents or surface parameters, for example.
+// This is that child allocator.
+class VIZ_COMMON_EXPORT ChildLocalSurfaceIdAllocator {
+ public:
+  ChildLocalSurfaceIdAllocator() = default;
+  ChildLocalSurfaceIdAllocator(ChildLocalSurfaceIdAllocator&& other) = default;
+  ChildLocalSurfaceIdAllocator& operator=(
+      ChildLocalSurfaceIdAllocator&& other) = default;
+  ~ChildLocalSurfaceIdAllocator() = default;
+
+  // When a parent-allocated LocalSurfaceId arrives in the child, the child
+  // needs to update its understanding of the last generated message so the
+  // messages can continue to monotonically increase.
+  const LocalSurfaceId& UpdateFromParent(
+      const LocalSurfaceId& parent_allocated_local_surface_id);
+
+  const LocalSurfaceId& GenerateId();
+
+  const LocalSurfaceId& last_known_local_surface_id() const {
+    return last_known_local_surface_id_;
+  }
+
+ private:
+  LocalSurfaceId last_known_local_surface_id_;
+
+  DISALLOW_COPY_AND_ASSIGN(ChildLocalSurfaceIdAllocator);
+};
+
+}  // namespace viz
+
+#endif  // COMPONENTS_VIZ_COMMON_SURFACES_CHILD_LOCAL_SURFACE_ID_ALLOCATOR_H_
diff --git a/components/viz/common/surfaces/child_local_surface_id_allocator_unittest.cc b/components/viz/common/surfaces/child_local_surface_id_allocator_unittest.cc
new file mode 100644
index 0000000000000000000000000000000000000000..9147c144578b9a8679e59d7cd471b9e9f32e67b9
--- /dev/null
+++ b/components/viz/common/surfaces/child_local_surface_id_allocator_unittest.cc
@@ -0,0 +1,180 @@
+// Copyright 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "components/viz/common/surfaces/child_local_surface_id_allocator.h"
+
+#include "testing/gtest/include/gtest/gtest.h"
+
+// ChildLocalSurfaceIdAllocator has 1 accessor which does not alter state:
+// - last_known_local_surface_id()
+//
+// For every operation which changes state we can test:
+// - the operation completed as expected,
+// - the accessors did not change, and/or
+// - the accessors changed in the way we expected.
+
+namespace viz {
+namespace {
+
+::testing::AssertionResult ParentSequenceNumberIsNotSet(
+    const LocalSurfaceId& local_surface_id);
+::testing::AssertionResult ChildSequenceNumberIsNotSet(
+    const LocalSurfaceId& local_surface_id);
+::testing::AssertionResult NonceIsEmpty(const LocalSurfaceId& local_surface_id);
+
+LocalSurfaceId GetFakeParentAllocatedLocalSurfaceId();
+ChildLocalSurfaceIdAllocator GetParentUpdatedAllocator();
+
+}  // namespace
+
+// The default constructor should initialize its last-known LocalSurfaceId (and
+// all of its components) to an invalid state.
+TEST(ChildLocalSurfaceIdAllocatorTest,
+     DefaultConstructorShouldNotSetLocalSurfaceIdComponents) {
+  ChildLocalSurfaceIdAllocator default_constructed_child_allocator;
+
+  const LocalSurfaceId& default_local_surface_id =
+      default_constructed_child_allocator.last_known_local_surface_id();
+  EXPECT_FALSE(default_local_surface_id.is_valid());
+  EXPECT_TRUE(ParentSequenceNumberIsNotSet(default_local_surface_id));
+  EXPECT_TRUE(ChildSequenceNumberIsNotSet(default_local_surface_id));
+  EXPECT_TRUE(NonceIsEmpty(default_local_surface_id));
+}
+
+// The move constructor should move the last-known LocalSurfaceId.
+TEST(ChildLocalSurfaceIdAllocatorTest,
+     MoveConstructorShouldMoveLastKnownLocalSurfaceId) {
+  ChildLocalSurfaceIdAllocator moving_child_allocator =
+      GetParentUpdatedAllocator();
+  LocalSurfaceId premoved_local_surface_id =
+      moving_child_allocator.last_known_local_surface_id();
+
+  ChildLocalSurfaceIdAllocator moved_to_child_allocator =
+      std::move(moving_child_allocator);
+
+  EXPECT_EQ(premoved_local_surface_id,
+            moved_to_child_allocator.last_known_local_surface_id());
+}
+
+// The move assignment operator should move the last-known LocalSurfaceId.
+TEST(ChildLocalSurfaceIdAllocatorTest,
+     MoveAssignmentOperatorShouldMoveLastKnownLocalSurfaceId) {
+  ChildLocalSurfaceIdAllocator moving_child_allocator =
+      GetParentUpdatedAllocator();
+  LocalSurfaceId premoved_local_surface_id =
+      moving_child_allocator.last_known_local_surface_id();
+  ChildLocalSurfaceIdAllocator moved_to_child_allocator;
+  EXPECT_NE(premoved_local_surface_id,
+            moved_to_child_allocator.last_known_local_surface_id());
+
+  moved_to_child_allocator = std::move(moving_child_allocator);
+
+  EXPECT_EQ(premoved_local_surface_id,
+            moved_to_child_allocator.last_known_local_surface_id());
+}
+
+// UpdateFromParent() on a child allocator should accept the parent's sequence
+// number and nonce. But it should continue to use its own child sequence
+// number.
+TEST(ChildLocalSurfaceIdAllocatorTest,
+     UpdateFromParentOnlyUpdatesExpectedLocalSurfaceIdComponents) {
+  ChildLocalSurfaceIdAllocator parent_updated_child_allocator;
+  LocalSurfaceId preupdate_local_surface_id =
+      parent_updated_child_allocator.last_known_local_surface_id();
+  LocalSurfaceId parent_allocated_local_surface_id =
+      GetFakeParentAllocatedLocalSurfaceId();
+  EXPECT_NE(preupdate_local_surface_id.parent_sequence_number(),
+            parent_allocated_local_surface_id.parent_sequence_number());
+  EXPECT_NE(preupdate_local_surface_id.child_sequence_number(),
+            parent_allocated_local_surface_id.child_sequence_number());
+  EXPECT_NE(preupdate_local_surface_id.nonce(),
+            parent_allocated_local_surface_id.nonce());
+
+  const LocalSurfaceId& returned_local_surface_id =
+      parent_updated_child_allocator.UpdateFromParent(
+          parent_allocated_local_surface_id);
+
+  const LocalSurfaceId& postupdate_local_surface_id =
+      parent_updated_child_allocator.last_known_local_surface_id();
+  EXPECT_EQ(postupdate_local_surface_id.parent_sequence_number(),
+            parent_allocated_local_surface_id.parent_sequence_number());
+  EXPECT_NE(postupdate_local_surface_id.child_sequence_number(),
+            parent_allocated_local_surface_id.child_sequence_number());
+  EXPECT_EQ(postupdate_local_surface_id.nonce(),
+            parent_allocated_local_surface_id.nonce());
+  EXPECT_EQ(returned_local_surface_id,
+            parent_updated_child_allocator.last_known_local_surface_id());
+}
+
+// GenerateId() on a child allocator should monotonically increment the child
+// sequence number.
+TEST(ChildLocalSurfaceIdAllocatorTest,
+     GenerateIdOnlyUpdatesExpectedLocalSurfaceIdComponents) {
+  ChildLocalSurfaceIdAllocator generating_child_allocator =
+      GetParentUpdatedAllocator();
+  LocalSurfaceId pregenerateid_local_surface_id =
+      generating_child_allocator.last_known_local_surface_id();
+
+  const LocalSurfaceId& returned_local_surface_id =
+      generating_child_allocator.GenerateId();
+
+  const LocalSurfaceId& postgenerateid_local_surface_id =
+      generating_child_allocator.last_known_local_surface_id();
+  EXPECT_EQ(pregenerateid_local_surface_id.parent_sequence_number(),
+            postgenerateid_local_surface_id.parent_sequence_number());
+  EXPECT_EQ(pregenerateid_local_surface_id.child_sequence_number() + 1,
+            postgenerateid_local_surface_id.child_sequence_number());
+  EXPECT_EQ(pregenerateid_local_surface_id.nonce(),
+            postgenerateid_local_surface_id.nonce());
+  EXPECT_EQ(returned_local_surface_id,
+            generating_child_allocator.last_known_local_surface_id());
+}
+
+namespace {
+
+::testing::AssertionResult ParentSequenceNumberIsNotSet(
+    const LocalSurfaceId& local_surface_id) {
+  constexpr uint32_t kInvalidParentSequenceNumber = 0;
+  if (local_surface_id.parent_sequence_number() == kInvalidParentSequenceNumber)
+    return ::testing::AssertionSuccess();
+
+  return ::testing::AssertionFailure() << "parent_sequence_number() is set";
+}
+
+::testing::AssertionResult ChildSequenceNumberIsNotSet(
+    const LocalSurfaceId& local_surface_id) {
+  constexpr uint32_t kInvalidChildSequenceNumber = 0;
+  if (local_surface_id.child_sequence_number() == kInvalidChildSequenceNumber)
+    return ::testing::AssertionSuccess();
+
+  return ::testing::AssertionFailure() << "child_sequence_number() is set";
+}
+
+::testing::AssertionResult NonceIsEmpty(
+    const LocalSurfaceId& local_surface_id) {
+  if (local_surface_id.nonce().is_empty())
+    return ::testing::AssertionSuccess();
+
+  return ::testing::AssertionFailure() << "nonce() is not empty";
+}
+
+LocalSurfaceId GetFakeParentAllocatedLocalSurfaceId() {
+  constexpr uint32_t kParentSequenceNumber = 3;
+  constexpr uint32_t kChildSequenceNumber = 1;
+  const base::UnguessableToken nonce = base::UnguessableToken::Create();
+
+  return LocalSurfaceId(kParentSequenceNumber, kChildSequenceNumber, nonce);
+}
+
+ChildLocalSurfaceIdAllocator GetParentUpdatedAllocator() {
+  ChildLocalSurfaceIdAllocator parent_updated_child_allocator;
+  LocalSurfaceId parent_allocated_local_surface_id =
+      GetFakeParentAllocatedLocalSurfaceId();
+  parent_updated_child_allocator.UpdateFromParent(
+      parent_allocated_local_surface_id);
+  return parent_updated_child_allocator;
+}
+
+}  // namespace
+}  // namespace viz
diff --git a/components/viz/common/surfaces/parent_local_surface_id_allocator_unittest.cc b/components/viz/common/surfaces/parent_local_surface_id_allocator_unittest.cc
new file mode 100644
index 0000000000000000000000000000000000000000..ada5b99a868f5b3014bac2d6c963840e12ca9b67
--- /dev/null
+++ b/components/viz/common/surfaces/parent_local_surface_id_allocator_unittest.cc
@@ -0,0 +1,209 @@
+// Copyright 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "components/viz/common/surfaces/parent_local_surface_id_allocator.h"
+
+#include "testing/gtest/include/gtest/gtest.h"
+
+// ParentLocalSurfaceIdAllocator has 1 accessor which does not alter state:
+// - last_known_local_surface_id()
+//
+// For every operation which changes state we can test:
+// - the operation completed as expected,
+// - the accessors did not change, and/or
+// - the accessors changed in the way we expected.
+
+namespace viz {
+namespace {
+
+::testing::AssertionResult ParentSequenceNumberIsNotSet(
+    const LocalSurfaceId& local_surface_id);
+::testing::AssertionResult ChildSequenceNumberIsSet(
+    const LocalSurfaceId& local_surface_id);
+::testing::AssertionResult NonceIsEmpty(const LocalSurfaceId& local_surface_id);
+
+LocalSurfaceId GetFakeChildAllocatedLocalSurfaceId();
+ParentLocalSurfaceIdAllocator GetChildUpdatedAllocator();
+
+}  // namespace
+
+// The default constructor should initialize its last-known LocalSurfaceId (and
+// all of its components) to an invalid state.
+TEST(ParentLocalSurfaceIdAllocatorTest,
+     DefaultConstructorShouldNotSetLocalSurfaceIdComponents) {
+  ParentLocalSurfaceIdAllocator default_constructed_parent_allocator;
+
+  const LocalSurfaceId& default_local_surface_id =
+      default_constructed_parent_allocator.last_known_local_surface_id();
+  EXPECT_FALSE(default_local_surface_id.is_valid());
+  EXPECT_TRUE(ParentSequenceNumberIsNotSet(default_local_surface_id));
+  EXPECT_TRUE(ChildSequenceNumberIsSet(default_local_surface_id));
+  EXPECT_TRUE(NonceIsEmpty(default_local_surface_id));
+}
+
+// The move constructor should move the last-known LocalSurfaceId.
+TEST(ParentLocalSurfaceIdAllocatorTest,
+     MoveConstructorShouldMoveLastKnownLocalSurfaceId) {
+  ParentLocalSurfaceIdAllocator moving_parent_allocator =
+      GetChildUpdatedAllocator();
+  LocalSurfaceId premoved_local_surface_id =
+      moving_parent_allocator.last_known_local_surface_id();
+
+  ParentLocalSurfaceIdAllocator moved_to_parent_allocator =
+      std::move(moving_parent_allocator);
+
+  EXPECT_EQ(premoved_local_surface_id,
+            moved_to_parent_allocator.last_known_local_surface_id());
+}
+
+// The move assignment operator should move the last-known LocalSurfaceId.
+TEST(ParentLocalSurfaceIdAllocatorTest,
+     MoveAssignmentOperatorShouldMoveLastKnownLocalSurfaceId) {
+  ParentLocalSurfaceIdAllocator moving_parent_allocator =
+      GetChildUpdatedAllocator();
+  LocalSurfaceId premoved_local_surface_id =
+      moving_parent_allocator.last_known_local_surface_id();
+  ParentLocalSurfaceIdAllocator moved_to_parent_allocator;
+  EXPECT_NE(premoved_local_surface_id,
+            moved_to_parent_allocator.last_known_local_surface_id());
+
+  moved_to_parent_allocator = std::move(moving_parent_allocator);
+
+  EXPECT_EQ(premoved_local_surface_id,
+            moved_to_parent_allocator.last_known_local_surface_id());
+}
+
+// UpdateFromChild() on a parent allocator should accept the child's sequence
+// number. But it should continue to use its own parent sequence number and
+// nonce.
+TEST(ParentLocalSurfaceIdAllocatorTest,
+     UpdateFromChildOnlyUpdatesExpectedLocalSurfaceIdComponents) {
+  ParentLocalSurfaceIdAllocator child_updated_parent_allocator;
+  LocalSurfaceId preupdate_local_surface_id =
+      child_updated_parent_allocator.last_known_local_surface_id();
+  LocalSurfaceId child_allocated_local_surface_id =
+      GetFakeChildAllocatedLocalSurfaceId();
+  EXPECT_NE(preupdate_local_surface_id.parent_sequence_number(),
+            child_allocated_local_surface_id.parent_sequence_number());
+  EXPECT_NE(preupdate_local_surface_id.child_sequence_number(),
+            child_allocated_local_surface_id.child_sequence_number());
+  EXPECT_NE(preupdate_local_surface_id.nonce(),
+            child_allocated_local_surface_id.nonce());
+
+  const LocalSurfaceId& returned_local_surface_id =
+      child_updated_parent_allocator.UpdateFromChild(
+          child_allocated_local_surface_id);
+
+  const LocalSurfaceId& postupdate_local_surface_id =
+      child_updated_parent_allocator.last_known_local_surface_id();
+  EXPECT_NE(postupdate_local_surface_id.parent_sequence_number(),
+            child_allocated_local_surface_id.parent_sequence_number());
+  EXPECT_EQ(postupdate_local_surface_id.child_sequence_number(),
+            child_allocated_local_surface_id.child_sequence_number());
+  EXPECT_NE(postupdate_local_surface_id.nonce(),
+            child_allocated_local_surface_id.nonce());
+  EXPECT_EQ(returned_local_surface_id,
+            child_updated_parent_allocator.last_known_local_surface_id());
+}
+
+// GenerateId() on a parent allocator should monotonically increment the parent
+// sequence number and create a new nonce.
+TEST(ParentLocalSurfaceIdAllocatorTest,
+     GenerateIdOnlyUpdatesExpectedLocalSurfaceIdComponents) {
+  ParentLocalSurfaceIdAllocator generating_parent_allocator =
+      GetChildUpdatedAllocator();
+  LocalSurfaceId pregenerateid_local_surface_id =
+      generating_parent_allocator.last_known_local_surface_id();
+
+  const LocalSurfaceId& returned_local_surface_id =
+      generating_parent_allocator.GenerateId();
+
+  const LocalSurfaceId& postgenerateid_local_surface_id =
+      generating_parent_allocator.last_known_local_surface_id();
+  EXPECT_EQ(pregenerateid_local_surface_id.parent_sequence_number() + 1,
+            postgenerateid_local_surface_id.parent_sequence_number());
+  EXPECT_EQ(pregenerateid_local_surface_id.child_sequence_number(),
+            postgenerateid_local_surface_id.child_sequence_number());
+  EXPECT_NE(pregenerateid_local_surface_id.nonce(),
+            postgenerateid_local_surface_id.nonce());
+  EXPECT_EQ(returned_local_surface_id,
+            generating_parent_allocator.last_known_local_surface_id());
+}
+
+// This test verifies that calling reset with a LocalSurfaceId updates the
+// last_known_local_surface_id and affects GenerateId.
+TEST(ParentLocalSurfaceIdAllocatorTest, ResetUpdatesComponents) {
+  ParentLocalSurfaceIdAllocator default_constructed_parent_allocator;
+
+  LocalSurfaceId default_local_surface_id =
+      default_constructed_parent_allocator.last_known_local_surface_id();
+  EXPECT_FALSE(default_local_surface_id.is_valid());
+  EXPECT_TRUE(ParentSequenceNumberIsNotSet(default_local_surface_id));
+  EXPECT_TRUE(ChildSequenceNumberIsSet(default_local_surface_id));
+  EXPECT_FALSE(NonceIsEmpty(default_local_surface_id));
+
+  LocalSurfaceId new_local_surface_id(
+      1u, 1u, base::UnguessableToken::Deserialize(0, 1u));
+
+  default_constructed_parent_allocator.Reset(new_local_surface_id);
+  EXPECT_EQ(new_local_surface_id,
+            default_constructed_parent_allocator.last_known_local_surface_id());
+
+  LocalSurfaceId generated_id =
+      default_constructed_parent_allocator.GenerateId();
+
+  EXPECT_EQ(generated_id.nonce(), new_local_surface_id.nonce());
+  EXPECT_EQ(generated_id.child_sequence_number(),
+            new_local_surface_id.child_sequence_number());
+  EXPECT_EQ(generated_id.parent_sequence_number(),
+            new_local_surface_id.child_sequence_number() + 1);
+}
+
+namespace {
+
+::testing::AssertionResult ParentSequenceNumberIsNotSet(
+    const LocalSurfaceId& local_surface_id) {
+  constexpr uint32_t kInvalidParentSequenceNumber = 0;
+  if (local_surface_id.parent_sequence_number() == kInvalidParentSequenceNumber)
+    return ::testing::AssertionSuccess();
+
+  return ::testing::AssertionFailure() << "parent_sequence_number() is set";
+}
+
+::testing::AssertionResult ChildSequenceNumberIsSet(
+    const LocalSurfaceId& local_surface_id) {
+  constexpr uint32_t kInvalidChildSequenceNumber = 0;
+  if (local_surface_id.child_sequence_number() != kInvalidChildSequenceNumber)
+    return ::testing::AssertionSuccess();
+
+  return ::testing::AssertionFailure() << "child_sequence_number() is not set";
+}
+
+::testing::AssertionResult NonceIsEmpty(
+    const LocalSurfaceId& local_surface_id) {
+  if (local_surface_id.nonce().is_empty())
+    return ::testing::AssertionSuccess();
+
+  return ::testing::AssertionFailure() << "nonce() is not empty";
+}
+
+LocalSurfaceId GetFakeChildAllocatedLocalSurfaceId() {
+  constexpr uint32_t kParentSequenceNumber = 1;
+  constexpr uint32_t kChildSequenceNumber = 3;
+  const base::UnguessableToken nonce = base::UnguessableToken::Create();
+
+  return LocalSurfaceId(kParentSequenceNumber, kChildSequenceNumber, nonce);
+}
+
+ParentLocalSurfaceIdAllocator GetChildUpdatedAllocator() {
+  ParentLocalSurfaceIdAllocator child_updated_parent_allocator;
+  LocalSurfaceId child_allocated_local_surface_id =
+      GetFakeChildAllocatedLocalSurfaceId();
+  child_updated_parent_allocator.UpdateFromChild(
+      child_allocated_local_surface_id);
+  return child_updated_parent_allocator;
+}
+
+}  // namespace
+}  // namespace viz
